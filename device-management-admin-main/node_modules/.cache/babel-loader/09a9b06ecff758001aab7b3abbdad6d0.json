{"ast":null,"code":"/**\n * Tokenize input string.\n */\nfunction lexer(str) {\n  var tokens = [];\n  var i = 0;\n\n  while (i < str.length) {\n    var char = str[i];\n\n    if (char === \"*\" || char === \"+\" || char === \"?\") {\n      tokens.push({\n        type: \"MODIFIER\",\n        index: i,\n        value: str[i++]\n      });\n      continue;\n    }\n\n    if (char === \"\\\\\") {\n      tokens.push({\n        type: \"ESCAPED_CHAR\",\n        index: i++,\n        value: str[i++]\n      });\n      continue;\n    }\n\n    if (char === \"{\") {\n      tokens.push({\n        type: \"OPEN\",\n        index: i,\n        value: str[i++]\n      });\n      continue;\n    }\n\n    if (char === \"}\") {\n      tokens.push({\n        type: \"CLOSE\",\n        index: i,\n        value: str[i++]\n      });\n      continue;\n    }\n\n    if (char === \":\") {\n      var name = \"\";\n      var j = i + 1;\n\n      while (j < str.length) {\n        var code = str.charCodeAt(j);\n\n        if ( // `0-9`\n        code >= 48 && code <= 57 || // `A-Z`\n        code >= 65 && code <= 90 || // `a-z`\n        code >= 97 && code <= 122 || // `_`\n        code === 95) {\n          name += str[j++];\n          continue;\n        }\n\n        break;\n      }\n\n      if (!name) throw new TypeError(\"Missing parameter name at \" + i);\n      tokens.push({\n        type: \"NAME\",\n        index: i,\n        value: name\n      });\n      i = j;\n      continue;\n    }\n\n    if (char === \"(\") {\n      var count = 1;\n      var pattern = \"\";\n      var j = i + 1;\n\n      if (str[j] === \"?\") {\n        throw new TypeError(\"Pattern cannot start with \\\"?\\\" at \" + j);\n      }\n\n      while (j < str.length) {\n        if (str[j] === \"\\\\\") {\n          pattern += str[j++] + str[j++];\n          continue;\n        }\n\n        if (str[j] === \")\") {\n          count--;\n\n          if (count === 0) {\n            j++;\n            break;\n          }\n        } else if (str[j] === \"(\") {\n          count++;\n\n          if (str[j + 1] !== \"?\") {\n            throw new TypeError(\"Capturing groups are not allowed at \" + j);\n          }\n        }\n\n        pattern += str[j++];\n      }\n\n      if (count) throw new TypeError(\"Unbalanced pattern at \" + i);\n      if (!pattern) throw new TypeError(\"Missing pattern at \" + i);\n      tokens.push({\n        type: \"PATTERN\",\n        index: i,\n        value: pattern\n      });\n      i = j;\n      continue;\n    }\n\n    tokens.push({\n      type: \"CHAR\",\n      index: i,\n      value: str[i++]\n    });\n  }\n\n  tokens.push({\n    type: \"END\",\n    index: i,\n    value: \"\"\n  });\n  return tokens;\n}\n/**\n * Parse a string for the raw tokens.\n */\n\n\nexport function parse(str, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var tokens = lexer(str);\n  var _a = options.prefixes,\n      prefixes = _a === void 0 ? \"./\" : _a;\n  var defaultPattern = \"[^\" + escapeString(options.delimiter || \"/#?\") + \"]+?\";\n  var result = [];\n  var key = 0;\n  var i = 0;\n  var path = \"\";\n\n  var tryConsume = function (type) {\n    if (i < tokens.length && tokens[i].type === type) return tokens[i++].value;\n  };\n\n  var mustConsume = function (type) {\n    var value = tryConsume(type);\n    if (value !== undefined) return value;\n    var _a = tokens[i],\n        nextType = _a.type,\n        index = _a.index;\n    throw new TypeError(\"Unexpected \" + nextType + \" at \" + index + \", expected \" + type);\n  };\n\n  var consumeText = function () {\n    var result = \"\";\n    var value; // tslint:disable-next-line\n\n    while (value = tryConsume(\"CHAR\") || tryConsume(\"ESCAPED_CHAR\")) {\n      result += value;\n    }\n\n    return result;\n  };\n\n  while (i < tokens.length) {\n    var char = tryConsume(\"CHAR\");\n    var name = tryConsume(\"NAME\");\n    var pattern = tryConsume(\"PATTERN\");\n\n    if (name || pattern) {\n      var prefix = char || \"\";\n\n      if (prefixes.indexOf(prefix) === -1) {\n        path += prefix;\n        prefix = \"\";\n      }\n\n      if (path) {\n        result.push(path);\n        path = \"\";\n      }\n\n      result.push({\n        name: name || key++,\n        prefix: prefix,\n        suffix: \"\",\n        pattern: pattern || defaultPattern,\n        modifier: tryConsume(\"MODIFIER\") || \"\"\n      });\n      continue;\n    }\n\n    var value = char || tryConsume(\"ESCAPED_CHAR\");\n\n    if (value) {\n      path += value;\n      continue;\n    }\n\n    if (path) {\n      result.push(path);\n      path = \"\";\n    }\n\n    var open = tryConsume(\"OPEN\");\n\n    if (open) {\n      var prefix = consumeText();\n      var name_1 = tryConsume(\"NAME\") || \"\";\n      var pattern_1 = tryConsume(\"PATTERN\") || \"\";\n      var suffix = consumeText();\n      mustConsume(\"CLOSE\");\n      result.push({\n        name: name_1 || (pattern_1 ? key++ : \"\"),\n        pattern: name_1 && !pattern_1 ? defaultPattern : pattern_1,\n        prefix: prefix,\n        suffix: suffix,\n        modifier: tryConsume(\"MODIFIER\") || \"\"\n      });\n      continue;\n    }\n\n    mustConsume(\"END\");\n  }\n\n  return result;\n}\n/**\n * Compile a string to a template function for the path.\n */\n\nexport function compile(str, options) {\n  return tokensToFunction(parse(str, options), options);\n}\n/**\n * Expose a method for transforming tokens into the path function.\n */\n\nexport function tokensToFunction(tokens, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var reFlags = flags(options);\n  var _a = options.encode,\n      encode = _a === void 0 ? function (x) {\n    return x;\n  } : _a,\n      _b = options.validate,\n      validate = _b === void 0 ? true : _b; // Compile all the tokens into regexps.\n\n  var matches = tokens.map(function (token) {\n    if (typeof token === \"object\") {\n      return new RegExp(\"^(?:\" + token.pattern + \")$\", reFlags);\n    }\n  });\n  return function (data) {\n    var path = \"\";\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i];\n\n      if (typeof token === \"string\") {\n        path += token;\n        continue;\n      }\n\n      var value = data ? data[token.name] : undefined;\n      var optional = token.modifier === \"?\" || token.modifier === \"*\";\n      var repeat = token.modifier === \"*\" || token.modifier === \"+\";\n\n      if (Array.isArray(value)) {\n        if (!repeat) {\n          throw new TypeError(\"Expected \\\"\" + token.name + \"\\\" to not repeat, but got an array\");\n        }\n\n        if (value.length === 0) {\n          if (optional) continue;\n          throw new TypeError(\"Expected \\\"\" + token.name + \"\\\" to not be empty\");\n        }\n\n        for (var j = 0; j < value.length; j++) {\n          var segment = encode(value[j], token);\n\n          if (validate && !matches[i].test(segment)) {\n            throw new TypeError(\"Expected all \\\"\" + token.name + \"\\\" to match \\\"\" + token.pattern + \"\\\", but got \\\"\" + segment + \"\\\"\");\n          }\n\n          path += token.prefix + segment + token.suffix;\n        }\n\n        continue;\n      }\n\n      if (typeof value === \"string\" || typeof value === \"number\") {\n        var segment = encode(String(value), token);\n\n        if (validate && !matches[i].test(segment)) {\n          throw new TypeError(\"Expected \\\"\" + token.name + \"\\\" to match \\\"\" + token.pattern + \"\\\", but got \\\"\" + segment + \"\\\"\");\n        }\n\n        path += token.prefix + segment + token.suffix;\n        continue;\n      }\n\n      if (optional) continue;\n      var typeOfMessage = repeat ? \"an array\" : \"a string\";\n      throw new TypeError(\"Expected \\\"\" + token.name + \"\\\" to be \" + typeOfMessage);\n    }\n\n    return path;\n  };\n}\n/**\n * Create path match function from `path-to-regexp` spec.\n */\n\nexport function match(str, options) {\n  var keys = [];\n  var re = pathToRegexp(str, keys, options);\n  return regexpToFunction(re, keys, options);\n}\n/**\n * Create a path match function from `path-to-regexp` output.\n */\n\nexport function regexpToFunction(re, keys, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _a = options.decode,\n      decode = _a === void 0 ? function (x) {\n    return x;\n  } : _a;\n  return function (pathname) {\n    var m = re.exec(pathname);\n    if (!m) return false;\n    var path = m[0],\n        index = m.index;\n    var params = Object.create(null);\n\n    var _loop_1 = function (i) {\n      // tslint:disable-next-line\n      if (m[i] === undefined) return \"continue\";\n      var key = keys[i - 1];\n\n      if (key.modifier === \"*\" || key.modifier === \"+\") {\n        params[key.name] = m[i].split(key.prefix + key.suffix).map(function (value) {\n          return decode(value, key);\n        });\n      } else {\n        params[key.name] = decode(m[i], key);\n      }\n    };\n\n    for (var i = 1; i < m.length; i++) {\n      _loop_1(i);\n    }\n\n    return {\n      path: path,\n      index: index,\n      params: params\n    };\n  };\n}\n/**\n * Escape a regular expression string.\n */\n\nfunction escapeString(str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, \"\\\\$1\");\n}\n/**\n * Get the flags for a regexp from the options.\n */\n\n\nfunction flags(options) {\n  return options && options.sensitive ? \"\" : \"i\";\n}\n/**\n * Pull out keys from a regexp.\n */\n\n\nfunction regexpToRegexp(path, keys) {\n  if (!keys) return path; // Use a negative lookahead to match only capturing groups.\n\n  var groups = path.source.match(/\\((?!\\?)/g);\n\n  if (groups) {\n    for (var i = 0; i < groups.length; i++) {\n      keys.push({\n        name: i,\n        prefix: \"\",\n        suffix: \"\",\n        modifier: \"\",\n        pattern: \"\"\n      });\n    }\n  }\n\n  return path;\n}\n/**\n * Transform an array into a regexp.\n */\n\n\nfunction arrayToRegexp(paths, keys, options) {\n  var parts = paths.map(function (path) {\n    return pathToRegexp(path, keys, options).source;\n  });\n  return new RegExp(\"(?:\" + parts.join(\"|\") + \")\", flags(options));\n}\n/**\n * Create a path regexp from string input.\n */\n\n\nfunction stringToRegexp(path, keys, options) {\n  return tokensToRegexp(parse(path, options), keys, options);\n}\n/**\n * Expose a function for taking tokens and returning a RegExp.\n */\n\n\nexport function tokensToRegexp(tokens, keys, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _a = options.strict,\n      strict = _a === void 0 ? false : _a,\n      _b = options.start,\n      start = _b === void 0 ? true : _b,\n      _c = options.end,\n      end = _c === void 0 ? true : _c,\n      _d = options.encode,\n      encode = _d === void 0 ? function (x) {\n    return x;\n  } : _d;\n  var endsWith = \"[\" + escapeString(options.endsWith || \"\") + \"]|$\";\n  var delimiter = \"[\" + escapeString(options.delimiter || \"/#?\") + \"]\";\n  var route = start ? \"^\" : \"\"; // Iterate over the tokens and create our regexp string.\n\n  for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {\n    var token = tokens_1[_i];\n\n    if (typeof token === \"string\") {\n      route += escapeString(encode(token));\n    } else {\n      var prefix = escapeString(encode(token.prefix));\n      var suffix = escapeString(encode(token.suffix));\n\n      if (token.pattern) {\n        if (keys) keys.push(token);\n\n        if (prefix || suffix) {\n          if (token.modifier === \"+\" || token.modifier === \"*\") {\n            var mod = token.modifier === \"*\" ? \"?\" : \"\";\n            route += \"(?:\" + prefix + \"((?:\" + token.pattern + \")(?:\" + suffix + prefix + \"(?:\" + token.pattern + \"))*)\" + suffix + \")\" + mod;\n          } else {\n            route += \"(?:\" + prefix + \"(\" + token.pattern + \")\" + suffix + \")\" + token.modifier;\n          }\n        } else {\n          route += \"(\" + token.pattern + \")\" + token.modifier;\n        }\n      } else {\n        route += \"(?:\" + prefix + suffix + \")\" + token.modifier;\n      }\n    }\n  }\n\n  if (end) {\n    if (!strict) route += delimiter + \"?\";\n    route += !options.endsWith ? \"$\" : \"(?=\" + endsWith + \")\";\n  } else {\n    var endToken = tokens[tokens.length - 1];\n    var isEndDelimited = typeof endToken === \"string\" ? delimiter.indexOf(endToken[endToken.length - 1]) > -1 : // tslint:disable-next-line\n    endToken === undefined;\n\n    if (!strict) {\n      route += \"(?:\" + delimiter + \"(?=\" + endsWith + \"))?\";\n    }\n\n    if (!isEndDelimited) {\n      route += \"(?=\" + delimiter + \"|\" + endsWith + \")\";\n    }\n  }\n\n  return new RegExp(route, flags(options));\n}\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n */\n\nexport function pathToRegexp(path, keys, options) {\n  if (path instanceof RegExp) return regexpToRegexp(path, keys);\n  if (Array.isArray(path)) return arrayToRegexp(path, keys, options);\n  return stringToRegexp(path, keys, options);\n}","map":{"version":3,"mappings":"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","names":["lexer","str","tokens","i","length","char","push","type","index","value","name","j","code","charCodeAt","TypeError","count","pattern","parse","options","_a","defaultPattern","escapeString","delimiter","result","key","path","tryConsume","mustConsume","undefined","nextType","consumeText","prefix","prefixes","indexOf","suffix","modifier","open","name_1","pattern_1","compile","tokensToFunction","reFlags","flags","x","_b","validate","matches","map","token","RegExp","data","optional","repeat","Array","isArray","segment","encode","test","String","typeOfMessage","match","keys","re","pathToRegexp","regexpToFunction","pathname","m","exec","params","Object","create","split","decode","replace","sensitive","regexpToRegexp","groups","source","arrayToRegexp","paths","parts","join","stringToRegexp","tokensToRegexp","start","_c","end","_d","endsWith","route","_i","mod","strict","endToken","isEndDelimited"],"sources":["D:\\Canh Long\\Documents\\Nam4_Ky 2\\Chuyên Đề Mạng\\Web\\device-management-admin-main\\node_modules\\@qixian.cs\\path-to-regexp\\src\\index.ts"],"sourcesContent":["/**\n * Tokenizer results.\n */\ninterface LexToken {\n  type:\n    | \"OPEN\"\n    | \"CLOSE\"\n    | \"PATTERN\"\n    | \"NAME\"\n    | \"CHAR\"\n    | \"ESCAPED_CHAR\"\n    | \"MODIFIER\"\n    | \"END\";\n  index: number;\n  value: string;\n}\n\n/**\n * Tokenize input string.\n */\nfunction lexer(str: string): LexToken[] {\n  const tokens: LexToken[] = [];\n  let i = 0;\n\n  while (i < str.length) {\n    const char = str[i];\n\n    if (char === \"*\" || char === \"+\" || char === \"?\") {\n      tokens.push({ type: \"MODIFIER\", index: i, value: str[i++] });\n      continue;\n    }\n\n    if (char === \"\\\\\") {\n      tokens.push({ type: \"ESCAPED_CHAR\", index: i++, value: str[i++] });\n      continue;\n    }\n\n    if (char === \"{\") {\n      tokens.push({ type: \"OPEN\", index: i, value: str[i++] });\n      continue;\n    }\n\n    if (char === \"}\") {\n      tokens.push({ type: \"CLOSE\", index: i, value: str[i++] });\n      continue;\n    }\n\n    if (char === \":\") {\n      let name = \"\";\n      let j = i + 1;\n\n      while (j < str.length) {\n        const code = str.charCodeAt(j);\n\n        if (\n          // `0-9`\n          (code >= 48 && code <= 57) ||\n          // `A-Z`\n          (code >= 65 && code <= 90) ||\n          // `a-z`\n          (code >= 97 && code <= 122) ||\n          // `_`\n          code === 95\n        ) {\n          name += str[j++];\n          continue;\n        }\n\n        break;\n      }\n\n      if (!name) throw new TypeError(`Missing parameter name at ${i}`);\n\n      tokens.push({ type: \"NAME\", index: i, value: name });\n      i = j;\n      continue;\n    }\n\n    if (char === \"(\") {\n      let count = 1;\n      let pattern = \"\";\n      let j = i + 1;\n\n      if (str[j] === \"?\") {\n        throw new TypeError(`Pattern cannot start with \"?\" at ${j}`);\n      }\n\n      while (j < str.length) {\n        if (str[j] === \"\\\\\") {\n          pattern += str[j++] + str[j++];\n          continue;\n        }\n\n        if (str[j] === \")\") {\n          count--;\n          if (count === 0) {\n            j++;\n            break;\n          }\n        } else if (str[j] === \"(\") {\n          count++;\n          if (str[j + 1] !== \"?\") {\n            throw new TypeError(`Capturing groups are not allowed at ${j}`);\n          }\n        }\n\n        pattern += str[j++];\n      }\n\n      if (count) throw new TypeError(`Unbalanced pattern at ${i}`);\n      if (!pattern) throw new TypeError(`Missing pattern at ${i}`);\n\n      tokens.push({ type: \"PATTERN\", index: i, value: pattern });\n      i = j;\n      continue;\n    }\n\n    tokens.push({ type: \"CHAR\", index: i, value: str[i++] });\n  }\n\n  tokens.push({ type: \"END\", index: i, value: \"\" });\n\n  return tokens;\n}\n\nexport interface ParseOptions {\n  /**\n   * Set the default delimiter for repeat parameters. (default: `'/'`)\n   */\n  delimiter?: string;\n  /**\n   * List of characters to automatically consider prefixes when parsing.\n   */\n  prefixes?: string;\n}\n\n/**\n * Parse a string for the raw tokens.\n */\nexport function parse(str: string, options: ParseOptions = {}): Token[] {\n  const tokens = lexer(str);\n  const { prefixes = \"./\" } = options;\n  const defaultPattern = `[^${escapeString(options.delimiter || \"/#?\")}]+?`;\n  const result: Token[] = [];\n  let key = 0;\n  let i = 0;\n  let path = \"\";\n\n  const tryConsume = (type: LexToken[\"type\"]): string | undefined => {\n    if (i < tokens.length && tokens[i].type === type) return tokens[i++].value;\n  };\n\n  const mustConsume = (type: LexToken[\"type\"]): string => {\n    const value = tryConsume(type);\n    if (value !== undefined) return value;\n    const { type: nextType, index } = tokens[i];\n    throw new TypeError(`Unexpected ${nextType} at ${index}, expected ${type}`);\n  };\n\n  const consumeText = (): string => {\n    let result = \"\";\n    let value: string | undefined;\n    // tslint:disable-next-line\n    while ((value = tryConsume(\"CHAR\") || tryConsume(\"ESCAPED_CHAR\"))) {\n      result += value;\n    }\n    return result;\n  };\n\n  while (i < tokens.length) {\n    const char = tryConsume(\"CHAR\");\n    const name = tryConsume(\"NAME\");\n    const pattern = tryConsume(\"PATTERN\");\n\n    if (name || pattern) {\n      let prefix = char || \"\";\n\n      if (prefixes.indexOf(prefix) === -1) {\n        path += prefix;\n        prefix = \"\";\n      }\n\n      if (path) {\n        result.push(path);\n        path = \"\";\n      }\n\n      result.push({\n        name: name || key++,\n        prefix,\n        suffix: \"\",\n        pattern: pattern || defaultPattern,\n        modifier: tryConsume(\"MODIFIER\") || \"\"\n      });\n      continue;\n    }\n\n    const value = char || tryConsume(\"ESCAPED_CHAR\");\n    if (value) {\n      path += value;\n      continue;\n    }\n\n    if (path) {\n      result.push(path);\n      path = \"\";\n    }\n\n    const open = tryConsume(\"OPEN\");\n    if (open) {\n      const prefix = consumeText();\n      const name = tryConsume(\"NAME\") || \"\";\n      const pattern = tryConsume(\"PATTERN\") || \"\";\n      const suffix = consumeText();\n\n      mustConsume(\"CLOSE\");\n\n      result.push({\n        name: name || (pattern ? key++ : \"\"),\n        pattern: name && !pattern ? defaultPattern : pattern,\n        prefix,\n        suffix,\n        modifier: tryConsume(\"MODIFIER\") || \"\"\n      });\n      continue;\n    }\n\n    mustConsume(\"END\");\n  }\n\n  return result;\n}\n\nexport interface TokensToFunctionOptions {\n  /**\n   * When `true` the regexp will be case sensitive. (default: `false`)\n   */\n  sensitive?: boolean;\n  /**\n   * Function for encoding input strings for output.\n   */\n  encode?: (value: string, token: Key) => string;\n  /**\n   * When `false` the function can produce an invalid (unmatched) path. (default: `true`)\n   */\n  validate?: boolean;\n}\n\n/**\n * Compile a string to a template function for the path.\n */\nexport function compile<P extends object = object>(\n  str: string,\n  options?: ParseOptions & TokensToFunctionOptions\n) {\n  return tokensToFunction<P>(parse(str, options), options);\n}\n\nexport type PathFunction<P extends object = object> = (data?: P) => string;\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nexport function tokensToFunction<P extends object = object>(\n  tokens: Token[],\n  options: TokensToFunctionOptions = {}\n): PathFunction<P> {\n  const reFlags = flags(options);\n  const { encode = (x: string) => x, validate = true } = options;\n\n  // Compile all the tokens into regexps.\n  const matches = tokens.map(token => {\n    if (typeof token === \"object\") {\n      return new RegExp(`^(?:${token.pattern})$`, reFlags);\n    }\n  });\n\n  return (data: Record<string, any> | null | undefined) => {\n    let path = \"\";\n\n    for (let i = 0; i < tokens.length; i++) {\n      const token = tokens[i];\n\n      if (typeof token === \"string\") {\n        path += token;\n        continue;\n      }\n\n      const value = data ? data[token.name] : undefined;\n      const optional = token.modifier === \"?\" || token.modifier === \"*\";\n      const repeat = token.modifier === \"*\" || token.modifier === \"+\";\n\n      if (Array.isArray(value)) {\n        if (!repeat) {\n          throw new TypeError(\n            `Expected \"${token.name}\" to not repeat, but got an array`\n          );\n        }\n\n        if (value.length === 0) {\n          if (optional) continue;\n\n          throw new TypeError(`Expected \"${token.name}\" to not be empty`);\n        }\n\n        for (let j = 0; j < value.length; j++) {\n          const segment = encode(value[j], token);\n\n          if (validate && !(matches[i] as RegExp).test(segment)) {\n            throw new TypeError(\n              `Expected all \"${token.name}\" to match \"${token.pattern}\", but got \"${segment}\"`\n            );\n          }\n\n          path += token.prefix + segment + token.suffix;\n        }\n\n        continue;\n      }\n\n      if (typeof value === \"string\" || typeof value === \"number\") {\n        const segment = encode(String(value), token);\n\n        if (validate && !(matches[i] as RegExp).test(segment)) {\n          throw new TypeError(\n            `Expected \"${token.name}\" to match \"${token.pattern}\", but got \"${segment}\"`\n          );\n        }\n\n        path += token.prefix + segment + token.suffix;\n        continue;\n      }\n\n      if (optional) continue;\n\n      const typeOfMessage = repeat ? \"an array\" : \"a string\";\n      throw new TypeError(`Expected \"${token.name}\" to be ${typeOfMessage}`);\n    }\n\n    return path;\n  };\n}\n\nexport interface RegexpToFunctionOptions {\n  /**\n   * Function for decoding strings for params.\n   */\n  decode?: (value: string, token: Key) => string;\n}\n\n/**\n * A match result contains data about the path match.\n */\nexport interface MatchResult<P extends object = object> {\n  path: string;\n  index: number;\n  params: P;\n}\n\n/**\n * A match is either `false` (no match) or a match result.\n */\nexport type Match<P extends object = object> = false | MatchResult<P>;\n\n/**\n * The match function takes a string and returns whether it matched the path.\n */\nexport type MatchFunction<P extends object = object> = (\n  path: string\n) => Match<P>;\n\n/**\n * Create path match function from `path-to-regexp` spec.\n */\nexport function match<P extends object = object>(\n  str: Path,\n  options?: ParseOptions & TokensToRegexpOptions & RegexpToFunctionOptions\n) {\n  const keys: Key[] = [];\n  const re = pathToRegexp(str, keys, options);\n  return regexpToFunction<P>(re, keys, options);\n}\n\n/**\n * Create a path match function from `path-to-regexp` output.\n */\nexport function regexpToFunction<P extends object = object>(\n  re: RegExp,\n  keys: Key[],\n  options: RegexpToFunctionOptions = {}\n): MatchFunction<P> {\n  const { decode = (x: string) => x } = options;\n\n  return function(pathname: string) {\n    const m = re.exec(pathname);\n    if (!m) return false;\n\n    const { 0: path, index } = m;\n    const params = Object.create(null);\n\n    for (let i = 1; i < m.length; i++) {\n      // tslint:disable-next-line\n      if (m[i] === undefined) continue;\n\n      const key = keys[i - 1];\n\n      if (key.modifier === \"*\" || key.modifier === \"+\") {\n        params[key.name] = m[i].split(key.prefix + key.suffix).map(value => {\n          return decode(value, key);\n        });\n      } else {\n        params[key.name] = decode(m[i], key);\n      }\n    }\n\n    return { path, index, params };\n  };\n}\n\n/**\n * Escape a regular expression string.\n */\nfunction escapeString(str: string) {\n  return str.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, \"\\\\$1\");\n}\n\n/**\n * Get the flags for a regexp from the options.\n */\nfunction flags(options?: { sensitive?: boolean }) {\n  return options && options.sensitive ? \"\" : \"i\";\n}\n\n/**\n * Metadata about a key.\n */\nexport interface Key {\n  name: string | number;\n  prefix: string;\n  suffix: string;\n  pattern: string;\n  modifier: string;\n}\n\n/**\n * A token is a string (nothing special) or key metadata (capture group).\n */\nexport type Token = string | Key;\n\n/**\n * Pull out keys from a regexp.\n */\nfunction regexpToRegexp(path: RegExp, keys?: Key[]): RegExp {\n  if (!keys) return path;\n\n  // Use a negative lookahead to match only capturing groups.\n  const groups = path.source.match(/\\((?!\\?)/g);\n\n  if (groups) {\n    for (let i = 0; i < groups.length; i++) {\n      keys.push({\n        name: i,\n        prefix: \"\",\n        suffix: \"\",\n        modifier: \"\",\n        pattern: \"\"\n      });\n    }\n  }\n\n  return path;\n}\n\n/**\n * Transform an array into a regexp.\n */\nfunction arrayToRegexp(\n  paths: Array<string | RegExp>,\n  keys?: Key[],\n  options?: TokensToRegexpOptions & ParseOptions\n): RegExp {\n  const parts = paths.map(path => pathToRegexp(path, keys, options).source);\n  return new RegExp(`(?:${parts.join(\"|\")})`, flags(options));\n}\n\n/**\n * Create a path regexp from string input.\n */\nfunction stringToRegexp(\n  path: string,\n  keys?: Key[],\n  options?: TokensToRegexpOptions & ParseOptions\n) {\n  return tokensToRegexp(parse(path, options), keys, options);\n}\n\nexport interface TokensToRegexpOptions {\n  /**\n   * When `true` the regexp will be case sensitive. (default: `false`)\n   */\n  sensitive?: boolean;\n  /**\n   * When `true` the regexp allows an optional trailing delimiter to match. (default: `false`)\n   */\n  strict?: boolean;\n  /**\n   * When `true` the regexp will match to the end of the string. (default: `true`)\n   */\n  end?: boolean;\n  /**\n   * When `true` the regexp will match from the beginning of the string. (default: `true`)\n   */\n  start?: boolean;\n  /**\n   * Sets the final character for non-ending optimistic matches. (default: `/`)\n   */\n  delimiter?: string;\n  /**\n   * List of characters that can also be \"end\" characters.\n   */\n  endsWith?: string;\n  /**\n   * Encode path tokens for use in the `RegExp`.\n   */\n  encode?: (value: string) => string;\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n */\nexport function tokensToRegexp(\n  tokens: Token[],\n  keys?: Key[],\n  options: TokensToRegexpOptions = {}\n) {\n  const {\n    strict = false,\n    start = true,\n    end = true,\n    encode = (x: string) => x\n  } = options;\n  const endsWith = `[${escapeString(options.endsWith || \"\")}]|$`;\n  const delimiter = `[${escapeString(options.delimiter || \"/#?\")}]`;\n  let route = start ? \"^\" : \"\";\n\n  // Iterate over the tokens and create our regexp string.\n  for (const token of tokens) {\n    if (typeof token === \"string\") {\n      route += escapeString(encode(token));\n    } else {\n      const prefix = escapeString(encode(token.prefix));\n      const suffix = escapeString(encode(token.suffix));\n\n      if (token.pattern) {\n        if (keys) keys.push(token);\n\n        if (prefix || suffix) {\n          if (token.modifier === \"+\" || token.modifier === \"*\") {\n            const mod = token.modifier === \"*\" ? \"?\" : \"\";\n            route += `(?:${prefix}((?:${token.pattern})(?:${suffix}${prefix}(?:${token.pattern}))*)${suffix})${mod}`;\n          } else {\n            route += `(?:${prefix}(${token.pattern})${suffix})${token.modifier}`;\n          }\n        } else {\n          route += `(${token.pattern})${token.modifier}`;\n        }\n      } else {\n        route += `(?:${prefix}${suffix})${token.modifier}`;\n      }\n    }\n  }\n\n  if (end) {\n    if (!strict) route += `${delimiter}?`;\n\n    route += !options.endsWith ? \"$\" : `(?=${endsWith})`;\n  } else {\n    const endToken = tokens[tokens.length - 1];\n    const isEndDelimited =\n      typeof endToken === \"string\"\n        ? delimiter.indexOf(endToken[endToken.length - 1]) > -1\n        : // tslint:disable-next-line\n          endToken === undefined;\n\n    if (!strict) {\n      route += `(?:${delimiter}(?=${endsWith}))?`;\n    }\n\n    if (!isEndDelimited) {\n      route += `(?=${delimiter}|${endsWith})`;\n    }\n  }\n\n  return new RegExp(route, flags(options));\n}\n\n/**\n * Supported `path-to-regexp` input types.\n */\nexport type Path = string | RegExp | Array<string | RegExp>;\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n */\nexport function pathToRegexp(\n  path: Path,\n  keys?: Key[],\n  options?: TokensToRegexpOptions & ParseOptions\n) {\n  if (path instanceof RegExp) return regexpToRegexp(path, keys);\n  if (Array.isArray(path)) return arrayToRegexp(path, keys, options);\n  return stringToRegexp(path, keys, options);\n}\n"]},"metadata":{},"sourceType":"module"}