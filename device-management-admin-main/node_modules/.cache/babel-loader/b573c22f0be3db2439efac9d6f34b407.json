{"ast":null,"code":"/* eslint-disable no-redeclare */\n\n/* eslint-disable no-multi-assign */\n\n/* eslint-disable no-param-reassign */\n\n/* eslint-disable no-return-assign */\n\n/* eslint-disable no-new-wrappers */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n/* eslint-disable no-var */\n\n/* eslint-disable no-plusplus */\n\n/* eslint-disable prefer-destructuring */\n\n/* eslint-disable @typescript-eslint/naming-convention */\n\n/* eslint-disable block-scoped-var */\n\n/* eslint-disable vars-on-top */\n\n/* eslint-disable no-bitwise */\n\n/* eslint-disable no-cond-assign */\n\n/*\n * A JavaScript implementation of the SHA256 hash function.\n *\n * FILE:\tsha256.js\n * VERSION:\t0.8\n * AUTHOR:\tChristoph Bichlmeier <informatik@zombiearena.de>\n *\n * NOTE: This version is not tested thoroughly!\n *\n * Copyright (c) 2003, Christoph Bichlmeier\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the copyright holder nor the names of contributors\n *    may be used to endorse or promote products derived from this software\n *    without specific prior written permission.\n *\n * ======================================================================\n *\n * THIS SOFTWARE IS PROVIDED BY THE AUTHORS ''AS IS'' AND ANY EXPRESS\n * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR\n * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE\n * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* SHA256 logical functions */\nfunction rotateRight(n, x) {\n  return x >>> n | x << 32 - n;\n}\n\nfunction choice(x, y, z) {\n  return x & y ^ ~x & z;\n}\n\nfunction majority(x, y, z) {\n  return x & y ^ x & z ^ y & z;\n}\n\nfunction sha256_Sigma0(x) {\n  return rotateRight(2, x) ^ rotateRight(13, x) ^ rotateRight(22, x);\n}\n\nfunction sha256_Sigma1(x) {\n  return rotateRight(6, x) ^ rotateRight(11, x) ^ rotateRight(25, x);\n}\n\nfunction sha256_sigma0(x) {\n  return rotateRight(7, x) ^ rotateRight(18, x) ^ x >>> 3;\n}\n\nfunction sha256_sigma1(x) {\n  return rotateRight(17, x) ^ rotateRight(19, x) ^ x >>> 10;\n}\n\nfunction sha256_expand(W, j) {\n  return W[j & 0x0f] += sha256_sigma1(W[j + 14 & 0x0f]) + W[j + 9 & 0x0f] + sha256_sigma0(W[j + 1 & 0x0f]);\n}\n/* Hash constant words K: */\n\n\nvar K256 = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n/* global arrays */\n\nvar ihash;\nvar count;\nvar buffer;\nvar sha256_hex_digits = '0123456789abcdef';\n/* Add 32-bit integers with 16-bit operations (bug in some JS-interpreters:\noverflow) */\n\nfunction safe_add(x, y) {\n  var lsw = (x & 0xffff) + (y & 0xffff);\n  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  return msw << 16 | lsw & 0xffff;\n}\n/* Initialise the SHA256 computation */\n\n\nfunction sha256_init() {\n  ihash = new Array(8);\n  count = new Array(2);\n  buffer = new Array(64);\n  count[0] = count[1] = 0;\n  ihash[0] = 0x6a09e667;\n  ihash[1] = 0xbb67ae85;\n  ihash[2] = 0x3c6ef372;\n  ihash[3] = 0xa54ff53a;\n  ihash[4] = 0x510e527f;\n  ihash[5] = 0x9b05688c;\n  ihash[6] = 0x1f83d9ab;\n  ihash[7] = 0x5be0cd19;\n}\n/* Transform a 512-bit message block */\n\n\nfunction sha256_transform() {\n  var a;\n  var b;\n  var c;\n  var d;\n  var e;\n  var f;\n  var g;\n  var h;\n  var T1;\n  var T2;\n  var W = new Array(16);\n  /* Initialize registers with the previous intermediate value */\n\n  a = ihash[0];\n  b = ihash[1];\n  c = ihash[2];\n  d = ihash[3];\n  e = ihash[4];\n  f = ihash[5];\n  g = ihash[6];\n  h = ihash[7];\n  /* make 32-bit words */\n\n  for (var i = 0; i < 16; i++) {\n    W[i] = buffer[(i << 2) + 3] | buffer[(i << 2) + 2] << 8 | buffer[(i << 2) + 1] << 16 | buffer[i << 2] << 24;\n  }\n\n  for (var j = 0; j < 64; j++) {\n    T1 = h + sha256_Sigma1(e) + choice(e, f, g) + K256[j];\n    if (j < 16) T1 += W[j];else T1 += sha256_expand(W, j);\n    T2 = sha256_Sigma0(a) + majority(a, b, c);\n    h = g;\n    g = f;\n    f = e;\n    e = safe_add(d, T1);\n    d = c;\n    c = b;\n    b = a;\n    a = safe_add(T1, T2);\n  }\n  /* Compute the current intermediate hash value */\n\n\n  ihash[0] += a;\n  ihash[1] += b;\n  ihash[2] += c;\n  ihash[3] += d;\n  ihash[4] += e;\n  ihash[5] += f;\n  ihash[6] += g;\n  ihash[7] += h;\n}\n/* Read the next chunk of data and update the SHA256 computation */\n\n\nfunction sha256_update(data, inputLen) {\n  var i;\n  var index;\n  var curpos = 0;\n  /* Compute number of bytes mod 64 */\n\n  index = count[0] >> 3 & 0x3f;\n  var remainder = inputLen & 0x3f;\n  /* Update number of bits */\n\n  if ((count[0] += inputLen << 3) < inputLen << 3) count[1]++;\n  count[1] += inputLen >> 29;\n  /* Transform as many times as possible */\n\n  for (i = 0; i + 63 < inputLen; i += 64) {\n    for (var j = index; j < 64; j++) {\n      buffer[j] = data.charCodeAt(curpos++);\n    }\n\n    sha256_transform();\n    index = 0;\n  }\n  /* Buffer remaining input */\n\n\n  for (var _j = 0; _j < remainder; _j++) {\n    buffer[_j] = data.charCodeAt(curpos++);\n  }\n}\n/* Finish the computation by operations such as padding */\n\n\nfunction sha256_final() {\n  var index = count[0] >> 3 & 0x3f;\n  buffer[index++] = 0x80;\n\n  if (index <= 56) {\n    for (var i = index; i < 56; i++) {\n      buffer[i] = 0;\n    }\n  } else {\n    for (var _i = index; _i < 64; _i++) {\n      buffer[_i] = 0;\n    }\n\n    sha256_transform();\n\n    for (var _i2 = 0; _i2 < 56; _i2++) {\n      buffer[_i2] = 0;\n    }\n  }\n\n  buffer[56] = count[1] >>> 24 & 0xff;\n  buffer[57] = count[1] >>> 16 & 0xff;\n  buffer[58] = count[1] >>> 8 & 0xff;\n  buffer[59] = count[1] & 0xff;\n  buffer[60] = count[0] >>> 24 & 0xff;\n  buffer[61] = count[0] >>> 16 & 0xff;\n  buffer[62] = count[0] >>> 8 & 0xff;\n  buffer[63] = count[0] & 0xff;\n  sha256_transform();\n}\n/* Split the internal hash values into an array of bytes */\n\n\nfunction sha256_encode_bytes() {\n  var j = 0;\n  var output = new Array(32);\n\n  for (var i = 0; i < 8; i++) {\n    output[j++] = ihash[i] >>> 24 & 0xff;\n    output[j++] = ihash[i] >>> 16 & 0xff;\n    output[j++] = ihash[i] >>> 8 & 0xff;\n    output[j++] = ihash[i] & 0xff;\n  }\n\n  return output;\n}\n/* Get the internal hash as a hex string */\n\n\nfunction sha256_encode_hex() {\n  var output = new String();\n\n  for (var i = 0; i < 8; i++) {\n    for (var j = 28; j >= 0; j -= 4) {\n      output += sha256_hex_digits.charAt(ihash[i] >>> j & 0x0f);\n    }\n  }\n\n  return output;\n}\n/* Main function: returns a hex string representing the SHA256 value of the\ngiven data */\n\n\nfunction digest(data) {\n  sha256_init();\n  sha256_update(data, data.length);\n  sha256_final();\n  return sha256_encode_hex();\n}\n\nexport default digest;","map":{"version":3,"names":["rotateRight","n","x","choice","y","z","majority","sha256_Sigma0","sha256_Sigma1","sha256_sigma0","sha256_sigma1","sha256_expand","W","j","K256","ihash","count","buffer","sha256_hex_digits","safe_add","lsw","msw","sha256_init","Array","sha256_transform","a","b","c","d","e","f","g","h","T1","T2","i","sha256_update","data","inputLen","index","curpos","remainder","charCodeAt","_j","sha256_final","_i","_i2","sha256_encode_bytes","output","sha256_encode_hex","String","charAt","digest","length"],"sources":["D:/Canh Long/Documents/Nam4_Ky 2/Chuyên Đề Mạng/Web/device-management-admin-main/node_modules/@umijs/route-utils/es/sha265.js"],"sourcesContent":["/* eslint-disable no-redeclare */\n\n/* eslint-disable no-multi-assign */\n\n/* eslint-disable no-param-reassign */\n\n/* eslint-disable no-return-assign */\n\n/* eslint-disable no-new-wrappers */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n/* eslint-disable no-var */\n\n/* eslint-disable no-plusplus */\n\n/* eslint-disable prefer-destructuring */\n\n/* eslint-disable @typescript-eslint/naming-convention */\n\n/* eslint-disable block-scoped-var */\n\n/* eslint-disable vars-on-top */\n\n/* eslint-disable no-bitwise */\n\n/* eslint-disable no-cond-assign */\n\n/*\n * A JavaScript implementation of the SHA256 hash function.\n *\n * FILE:\tsha256.js\n * VERSION:\t0.8\n * AUTHOR:\tChristoph Bichlmeier <informatik@zombiearena.de>\n *\n * NOTE: This version is not tested thoroughly!\n *\n * Copyright (c) 2003, Christoph Bichlmeier\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the copyright holder nor the names of contributors\n *    may be used to endorse or promote products derived from this software\n *    without specific prior written permission.\n *\n * ======================================================================\n *\n * THIS SOFTWARE IS PROVIDED BY THE AUTHORS ''AS IS'' AND ANY EXPRESS\n * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR\n * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE\n * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* SHA256 logical functions */\nfunction rotateRight(n, x) {\n  return x >>> n | x << 32 - n;\n}\n\nfunction choice(x, y, z) {\n  return x & y ^ ~x & z;\n}\n\nfunction majority(x, y, z) {\n  return x & y ^ x & z ^ y & z;\n}\n\nfunction sha256_Sigma0(x) {\n  return rotateRight(2, x) ^ rotateRight(13, x) ^ rotateRight(22, x);\n}\n\nfunction sha256_Sigma1(x) {\n  return rotateRight(6, x) ^ rotateRight(11, x) ^ rotateRight(25, x);\n}\n\nfunction sha256_sigma0(x) {\n  return rotateRight(7, x) ^ rotateRight(18, x) ^ x >>> 3;\n}\n\nfunction sha256_sigma1(x) {\n  return rotateRight(17, x) ^ rotateRight(19, x) ^ x >>> 10;\n}\n\nfunction sha256_expand(W, j) {\n  return W[j & 0x0f] += sha256_sigma1(W[j + 14 & 0x0f]) + W[j + 9 & 0x0f] + sha256_sigma0(W[j + 1 & 0x0f]);\n}\n/* Hash constant words K: */\n\n\nvar K256 = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n/* global arrays */\n\nvar ihash;\nvar count;\nvar buffer;\nvar sha256_hex_digits = '0123456789abcdef';\n/* Add 32-bit integers with 16-bit operations (bug in some JS-interpreters:\noverflow) */\n\nfunction safe_add(x, y) {\n  var lsw = (x & 0xffff) + (y & 0xffff);\n  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  return msw << 16 | lsw & 0xffff;\n}\n/* Initialise the SHA256 computation */\n\n\nfunction sha256_init() {\n  ihash = new Array(8);\n  count = new Array(2);\n  buffer = new Array(64);\n  count[0] = count[1] = 0;\n  ihash[0] = 0x6a09e667;\n  ihash[1] = 0xbb67ae85;\n  ihash[2] = 0x3c6ef372;\n  ihash[3] = 0xa54ff53a;\n  ihash[4] = 0x510e527f;\n  ihash[5] = 0x9b05688c;\n  ihash[6] = 0x1f83d9ab;\n  ihash[7] = 0x5be0cd19;\n}\n/* Transform a 512-bit message block */\n\n\nfunction sha256_transform() {\n  var a;\n  var b;\n  var c;\n  var d;\n  var e;\n  var f;\n  var g;\n  var h;\n  var T1;\n  var T2;\n  var W = new Array(16);\n  /* Initialize registers with the previous intermediate value */\n\n  a = ihash[0];\n  b = ihash[1];\n  c = ihash[2];\n  d = ihash[3];\n  e = ihash[4];\n  f = ihash[5];\n  g = ihash[6];\n  h = ihash[7];\n  /* make 32-bit words */\n\n  for (var i = 0; i < 16; i++) {\n    W[i] = buffer[(i << 2) + 3] | buffer[(i << 2) + 2] << 8 | buffer[(i << 2) + 1] << 16 | buffer[i << 2] << 24;\n  }\n\n  for (var j = 0; j < 64; j++) {\n    T1 = h + sha256_Sigma1(e) + choice(e, f, g) + K256[j];\n    if (j < 16) T1 += W[j];else T1 += sha256_expand(W, j);\n    T2 = sha256_Sigma0(a) + majority(a, b, c);\n    h = g;\n    g = f;\n    f = e;\n    e = safe_add(d, T1);\n    d = c;\n    c = b;\n    b = a;\n    a = safe_add(T1, T2);\n  }\n  /* Compute the current intermediate hash value */\n\n\n  ihash[0] += a;\n  ihash[1] += b;\n  ihash[2] += c;\n  ihash[3] += d;\n  ihash[4] += e;\n  ihash[5] += f;\n  ihash[6] += g;\n  ihash[7] += h;\n}\n/* Read the next chunk of data and update the SHA256 computation */\n\n\nfunction sha256_update(data, inputLen) {\n  var i;\n  var index;\n  var curpos = 0;\n  /* Compute number of bytes mod 64 */\n\n  index = count[0] >> 3 & 0x3f;\n  var remainder = inputLen & 0x3f;\n  /* Update number of bits */\n\n  if ((count[0] += inputLen << 3) < inputLen << 3) count[1]++;\n  count[1] += inputLen >> 29;\n  /* Transform as many times as possible */\n\n  for (i = 0; i + 63 < inputLen; i += 64) {\n    for (var j = index; j < 64; j++) {\n      buffer[j] = data.charCodeAt(curpos++);\n    }\n\n    sha256_transform();\n    index = 0;\n  }\n  /* Buffer remaining input */\n\n\n  for (var _j = 0; _j < remainder; _j++) {\n    buffer[_j] = data.charCodeAt(curpos++);\n  }\n}\n/* Finish the computation by operations such as padding */\n\n\nfunction sha256_final() {\n  var index = count[0] >> 3 & 0x3f;\n  buffer[index++] = 0x80;\n\n  if (index <= 56) {\n    for (var i = index; i < 56; i++) {\n      buffer[i] = 0;\n    }\n  } else {\n    for (var _i = index; _i < 64; _i++) {\n      buffer[_i] = 0;\n    }\n\n    sha256_transform();\n\n    for (var _i2 = 0; _i2 < 56; _i2++) {\n      buffer[_i2] = 0;\n    }\n  }\n\n  buffer[56] = count[1] >>> 24 & 0xff;\n  buffer[57] = count[1] >>> 16 & 0xff;\n  buffer[58] = count[1] >>> 8 & 0xff;\n  buffer[59] = count[1] & 0xff;\n  buffer[60] = count[0] >>> 24 & 0xff;\n  buffer[61] = count[0] >>> 16 & 0xff;\n  buffer[62] = count[0] >>> 8 & 0xff;\n  buffer[63] = count[0] & 0xff;\n  sha256_transform();\n}\n/* Split the internal hash values into an array of bytes */\n\n\nfunction sha256_encode_bytes() {\n  var j = 0;\n  var output = new Array(32);\n\n  for (var i = 0; i < 8; i++) {\n    output[j++] = ihash[i] >>> 24 & 0xff;\n    output[j++] = ihash[i] >>> 16 & 0xff;\n    output[j++] = ihash[i] >>> 8 & 0xff;\n    output[j++] = ihash[i] & 0xff;\n  }\n\n  return output;\n}\n/* Get the internal hash as a hex string */\n\n\nfunction sha256_encode_hex() {\n  var output = new String();\n\n  for (var i = 0; i < 8; i++) {\n    for (var j = 28; j >= 0; j -= 4) {\n      output += sha256_hex_digits.charAt(ihash[i] >>> j & 0x0f);\n    }\n  }\n\n  return output;\n}\n/* Main function: returns a hex string representing the SHA256 value of the\ngiven data */\n\n\nfunction digest(data) {\n  sha256_init();\n  sha256_update(data, data.length);\n  sha256_final();\n  return sha256_encode_hex();\n}\n\nexport default digest;"],"mappings":"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"},"metadata":{},"sourceType":"module"}