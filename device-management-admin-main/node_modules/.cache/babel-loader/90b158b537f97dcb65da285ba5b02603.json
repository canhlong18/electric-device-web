{"ast":null,"code":"import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport moment from 'moment';\nimport get from \"rc-util/es/utils/get\";\nimport isNil from '../isNil';\nexport var dateFormatterMap = {\n  time: 'HH:mm:ss',\n  timeRange: 'HH:mm:ss',\n  date: 'YYYY-MM-DD',\n  dateWeek: 'YYYY-wo',\n  dateMonth: 'YYYY-MM',\n  dateQuarter: 'YYYY-\\\\QQ',\n  dateYear: 'YYYY',\n  dateRange: 'YYYY-MM-DD',\n  dateTime: 'YYYY-MM-DD HH:mm:ss',\n  dateTimeRange: 'YYYY-MM-DD HH:mm:ss'\n};\n\nfunction isObject(o) {\n  return Object.prototype.toString.call(o) === '[object Object]';\n}\n\nexport function isPlainObject(o) {\n  if (isObject(o) === false) return false; // If has modified constructor\n\n  var ctor = o.constructor;\n  if (ctor === undefined) return true; // If has modified prototype\n\n  var prot = ctor.prototype;\n  if (isObject(prot) === false) return false; // If constructor does not have an Object-specific method\n\n  if (prot.hasOwnProperty('isPrototypeOf') === false) {\n    return false;\n  } // Most likely a plain Object\n\n\n  return true;\n}\n/**\n * 根据不同的格式转化 moment\n *\n * @param value\n * @param dateFormatter\n * @param valueType\n */\n\nexport var convertMoment = function convertMoment(value, dateFormatter, valueType) {\n  if (!dateFormatter) {\n    return value;\n  }\n\n  if (moment.isMoment(value)) {\n    if (dateFormatter === 'number') {\n      return value.valueOf();\n    }\n\n    if (dateFormatter === 'string') {\n      return value.format(dateFormatterMap[valueType] || 'YYYY-MM-DD HH:mm:ss');\n    }\n\n    if (typeof dateFormatter === 'string' && dateFormatter !== 'string') {\n      return value.format(dateFormatter);\n    }\n\n    if (typeof dateFormatter === 'function') {\n      return dateFormatter(value, valueType);\n    }\n  }\n\n  return value;\n};\n/**\n * 这里主要是来转化一下数据 将 moment 转化为 string 将 all 默认删除\n *\n * @param value\n * @param dateFormatter\n * @param proColumnsMap\n */\n\nvar conversionMomentValue = function conversionMomentValue(value, dateFormatter, valueTypeMap, omitNil, parentKey) {\n  var tmpValue = {};\n  if (typeof window === 'undefined') return value; // 如果 value 是 string | null | Blob类型 其中之一，直接返回\n  // 形如 {key: [File, File]} 的表单字段当进行第二次递归时会导致其直接越过 typeof value !== 'object' 这一判断 https://github.com/ant-design/pro-components/issues/2071\n\n  if (_typeof(value) !== 'object' || isNil(value) || value instanceof Blob || Array.isArray(value)) {\n    return value;\n  }\n\n  Object.keys(value).forEach(function (key) {\n    var namePath = parentKey ? [parentKey, key].flat(1) : [key];\n    var valueFormatMap = get(valueTypeMap, namePath) || 'text';\n    var valueType = 'text';\n    var dateFormat;\n\n    if (typeof valueFormatMap === 'string') {\n      valueType = valueFormatMap;\n    } else if (valueFormatMap) {\n      valueType = valueFormatMap.valueType;\n      dateFormat = valueFormatMap.dateFormat;\n    }\n\n    var itemValue = value[key];\n\n    if (isNil(itemValue) && omitNil) {\n      return;\n    } // 处理嵌套的情况\n\n\n    if (isPlainObject(itemValue) && // 不是数组\n    !Array.isArray(itemValue) && // 不是 moment\n    !moment.isMoment(itemValue)) {\n      tmpValue[key] = conversionMomentValue(itemValue, dateFormatter, valueTypeMap, omitNil, [key]);\n      return;\n    } // 处理 FormList 的 value\n\n\n    if (Array.isArray(itemValue)) {\n      tmpValue[key] = itemValue.map(function (arrayValue, index) {\n        if (moment.isMoment(arrayValue)) {\n          return convertMoment(arrayValue, dateFormat || dateFormatter, valueType);\n        }\n\n        return conversionMomentValue(arrayValue, dateFormatter, valueTypeMap, omitNil, [key, \"\".concat(index)]);\n      });\n      return;\n    }\n\n    tmpValue[key] = convertMoment(itemValue, dateFormat || dateFormatter, valueType);\n  });\n  return tmpValue;\n};\n\nexport default conversionMomentValue;","map":{"version":3,"names":["_typeof","moment","get","isNil","dateFormatterMap","time","timeRange","date","dateWeek","dateMonth","dateQuarter","dateYear","dateRange","dateTime","dateTimeRange","isObject","o","Object","prototype","toString","call","isPlainObject","ctor","constructor","undefined","prot","hasOwnProperty","convertMoment","value","dateFormatter","valueType","isMoment","valueOf","format","conversionMomentValue","valueTypeMap","omitNil","parentKey","tmpValue","window","Blob","Array","isArray","keys","forEach","key","namePath","flat","valueFormatMap","dateFormat","itemValue","map","arrayValue","index","concat"],"sources":["D:/Canh Long/Documents/Nam4_Ky 2/Chuyên Đề Mạng/Web/device-management-admin-main/node_modules/@ant-design/pro-utils/es/conversionMomentValue/index.js"],"sourcesContent":["import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport moment from 'moment';\nimport get from \"rc-util/es/utils/get\";\nimport isNil from '../isNil';\nexport var dateFormatterMap = {\n  time: 'HH:mm:ss',\n  timeRange: 'HH:mm:ss',\n  date: 'YYYY-MM-DD',\n  dateWeek: 'YYYY-wo',\n  dateMonth: 'YYYY-MM',\n  dateQuarter: 'YYYY-\\\\QQ',\n  dateYear: 'YYYY',\n  dateRange: 'YYYY-MM-DD',\n  dateTime: 'YYYY-MM-DD HH:mm:ss',\n  dateTimeRange: 'YYYY-MM-DD HH:mm:ss'\n};\n\nfunction isObject(o) {\n  return Object.prototype.toString.call(o) === '[object Object]';\n}\n\nexport function isPlainObject(o) {\n  if (isObject(o) === false) return false; // If has modified constructor\n\n  var ctor = o.constructor;\n  if (ctor === undefined) return true; // If has modified prototype\n\n  var prot = ctor.prototype;\n  if (isObject(prot) === false) return false; // If constructor does not have an Object-specific method\n\n  if (prot.hasOwnProperty('isPrototypeOf') === false) {\n    return false;\n  } // Most likely a plain Object\n\n\n  return true;\n}\n/**\n * 根据不同的格式转化 moment\n *\n * @param value\n * @param dateFormatter\n * @param valueType\n */\n\nexport var convertMoment = function convertMoment(value, dateFormatter, valueType) {\n  if (!dateFormatter) {\n    return value;\n  }\n\n  if (moment.isMoment(value)) {\n    if (dateFormatter === 'number') {\n      return value.valueOf();\n    }\n\n    if (dateFormatter === 'string') {\n      return value.format(dateFormatterMap[valueType] || 'YYYY-MM-DD HH:mm:ss');\n    }\n\n    if (typeof dateFormatter === 'string' && dateFormatter !== 'string') {\n      return value.format(dateFormatter);\n    }\n\n    if (typeof dateFormatter === 'function') {\n      return dateFormatter(value, valueType);\n    }\n  }\n\n  return value;\n};\n/**\n * 这里主要是来转化一下数据 将 moment 转化为 string 将 all 默认删除\n *\n * @param value\n * @param dateFormatter\n * @param proColumnsMap\n */\n\nvar conversionMomentValue = function conversionMomentValue(value, dateFormatter, valueTypeMap, omitNil, parentKey) {\n  var tmpValue = {};\n  if (typeof window === 'undefined') return value; // 如果 value 是 string | null | Blob类型 其中之一，直接返回\n  // 形如 {key: [File, File]} 的表单字段当进行第二次递归时会导致其直接越过 typeof value !== 'object' 这一判断 https://github.com/ant-design/pro-components/issues/2071\n\n  if (_typeof(value) !== 'object' || isNil(value) || value instanceof Blob || Array.isArray(value)) {\n    return value;\n  }\n\n  Object.keys(value).forEach(function (key) {\n    var namePath = parentKey ? [parentKey, key].flat(1) : [key];\n    var valueFormatMap = get(valueTypeMap, namePath) || 'text';\n    var valueType = 'text';\n    var dateFormat;\n\n    if (typeof valueFormatMap === 'string') {\n      valueType = valueFormatMap;\n    } else if (valueFormatMap) {\n      valueType = valueFormatMap.valueType;\n      dateFormat = valueFormatMap.dateFormat;\n    }\n\n    var itemValue = value[key];\n\n    if (isNil(itemValue) && omitNil) {\n      return;\n    } // 处理嵌套的情况\n\n\n    if (isPlainObject(itemValue) && // 不是数组\n    !Array.isArray(itemValue) && // 不是 moment\n    !moment.isMoment(itemValue)) {\n      tmpValue[key] = conversionMomentValue(itemValue, dateFormatter, valueTypeMap, omitNil, [key]);\n      return;\n    } // 处理 FormList 的 value\n\n\n    if (Array.isArray(itemValue)) {\n      tmpValue[key] = itemValue.map(function (arrayValue, index) {\n        if (moment.isMoment(arrayValue)) {\n          return convertMoment(arrayValue, dateFormat || dateFormatter, valueType);\n        }\n\n        return conversionMomentValue(arrayValue, dateFormatter, valueTypeMap, omitNil, [key, \"\".concat(index)]);\n      });\n      return;\n    }\n\n    tmpValue[key] = convertMoment(itemValue, dateFormat || dateFormatter, valueType);\n  });\n  return tmpValue;\n};\n\nexport default conversionMomentValue;"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,mCAApB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,GAAP,MAAgB,sBAAhB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAO,IAAIC,gBAAgB,GAAG;EAC5BC,IAAI,EAAE,UADsB;EAE5BC,SAAS,EAAE,UAFiB;EAG5BC,IAAI,EAAE,YAHsB;EAI5BC,QAAQ,EAAE,SAJkB;EAK5BC,SAAS,EAAE,SALiB;EAM5BC,WAAW,EAAE,WANe;EAO5BC,QAAQ,EAAE,MAPkB;EAQ5BC,SAAS,EAAE,YARiB;EAS5BC,QAAQ,EAAE,qBATkB;EAU5BC,aAAa,EAAE;AAVa,CAAvB;;AAaP,SAASC,QAAT,CAAkBC,CAAlB,EAAqB;EACnB,OAAOC,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BJ,CAA/B,MAAsC,iBAA7C;AACD;;AAED,OAAO,SAASK,aAAT,CAAuBL,CAAvB,EAA0B;EAC/B,IAAID,QAAQ,CAACC,CAAD,CAAR,KAAgB,KAApB,EAA2B,OAAO,KAAP,CADI,CACU;;EAEzC,IAAIM,IAAI,GAAGN,CAAC,CAACO,WAAb;EACA,IAAID,IAAI,KAAKE,SAAb,EAAwB,OAAO,IAAP,CAJO,CAIM;;EAErC,IAAIC,IAAI,GAAGH,IAAI,CAACJ,SAAhB;EACA,IAAIH,QAAQ,CAACU,IAAD,CAAR,KAAmB,KAAvB,EAA8B,OAAO,KAAP,CAPC,CAOa;;EAE5C,IAAIA,IAAI,CAACC,cAAL,CAAoB,eAApB,MAAyC,KAA7C,EAAoD;IAClD,OAAO,KAAP;EACD,CAX8B,CAW7B;;;EAGF,OAAO,IAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAIC,aAAa,GAAG,SAASA,aAAT,CAAuBC,KAAvB,EAA8BC,aAA9B,EAA6CC,SAA7C,EAAwD;EACjF,IAAI,CAACD,aAAL,EAAoB;IAClB,OAAOD,KAAP;EACD;;EAED,IAAI3B,MAAM,CAAC8B,QAAP,CAAgBH,KAAhB,CAAJ,EAA4B;IAC1B,IAAIC,aAAa,KAAK,QAAtB,EAAgC;MAC9B,OAAOD,KAAK,CAACI,OAAN,EAAP;IACD;;IAED,IAAIH,aAAa,KAAK,QAAtB,EAAgC;MAC9B,OAAOD,KAAK,CAACK,MAAN,CAAa7B,gBAAgB,CAAC0B,SAAD,CAAhB,IAA+B,qBAA5C,CAAP;IACD;;IAED,IAAI,OAAOD,aAAP,KAAyB,QAAzB,IAAqCA,aAAa,KAAK,QAA3D,EAAqE;MACnE,OAAOD,KAAK,CAACK,MAAN,CAAaJ,aAAb,CAAP;IACD;;IAED,IAAI,OAAOA,aAAP,KAAyB,UAA7B,EAAyC;MACvC,OAAOA,aAAa,CAACD,KAAD,EAAQE,SAAR,CAApB;IACD;EACF;;EAED,OAAOF,KAAP;AACD,CAxBM;AAyBP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIM,qBAAqB,GAAG,SAASA,qBAAT,CAA+BN,KAA/B,EAAsCC,aAAtC,EAAqDM,YAArD,EAAmEC,OAAnE,EAA4EC,SAA5E,EAAuF;EACjH,IAAIC,QAAQ,GAAG,EAAf;EACA,IAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC,OAAOX,KAAP,CAF8E,CAEhE;EACjD;;EAEA,IAAI5B,OAAO,CAAC4B,KAAD,CAAP,KAAmB,QAAnB,IAA+BzB,KAAK,CAACyB,KAAD,CAApC,IAA+CA,KAAK,YAAYY,IAAhE,IAAwEC,KAAK,CAACC,OAAN,CAAcd,KAAd,CAA5E,EAAkG;IAChG,OAAOA,KAAP;EACD;;EAEDX,MAAM,CAAC0B,IAAP,CAAYf,KAAZ,EAAmBgB,OAAnB,CAA2B,UAAUC,GAAV,EAAe;IACxC,IAAIC,QAAQ,GAAGT,SAAS,GAAG,CAACA,SAAD,EAAYQ,GAAZ,EAAiBE,IAAjB,CAAsB,CAAtB,CAAH,GAA8B,CAACF,GAAD,CAAtD;IACA,IAAIG,cAAc,GAAG9C,GAAG,CAACiC,YAAD,EAAeW,QAAf,CAAH,IAA+B,MAApD;IACA,IAAIhB,SAAS,GAAG,MAAhB;IACA,IAAImB,UAAJ;;IAEA,IAAI,OAAOD,cAAP,KAA0B,QAA9B,EAAwC;MACtClB,SAAS,GAAGkB,cAAZ;IACD,CAFD,MAEO,IAAIA,cAAJ,EAAoB;MACzBlB,SAAS,GAAGkB,cAAc,CAAClB,SAA3B;MACAmB,UAAU,GAAGD,cAAc,CAACC,UAA5B;IACD;;IAED,IAAIC,SAAS,GAAGtB,KAAK,CAACiB,GAAD,CAArB;;IAEA,IAAI1C,KAAK,CAAC+C,SAAD,CAAL,IAAoBd,OAAxB,EAAiC;MAC/B;IACD,CAjBuC,CAiBtC;;;IAGF,IAAIf,aAAa,CAAC6B,SAAD,CAAb,IAA4B;IAChC,CAACT,KAAK,CAACC,OAAN,CAAcQ,SAAd,CADG,IACyB;IAC7B,CAACjD,MAAM,CAAC8B,QAAP,CAAgBmB,SAAhB,CAFD,EAE6B;MAC3BZ,QAAQ,CAACO,GAAD,CAAR,GAAgBX,qBAAqB,CAACgB,SAAD,EAAYrB,aAAZ,EAA2BM,YAA3B,EAAyCC,OAAzC,EAAkD,CAACS,GAAD,CAAlD,CAArC;MACA;IACD,CAzBuC,CAyBtC;;;IAGF,IAAIJ,KAAK,CAACC,OAAN,CAAcQ,SAAd,CAAJ,EAA8B;MAC5BZ,QAAQ,CAACO,GAAD,CAAR,GAAgBK,SAAS,CAACC,GAAV,CAAc,UAAUC,UAAV,EAAsBC,KAAtB,EAA6B;QACzD,IAAIpD,MAAM,CAAC8B,QAAP,CAAgBqB,UAAhB,CAAJ,EAAiC;UAC/B,OAAOzB,aAAa,CAACyB,UAAD,EAAaH,UAAU,IAAIpB,aAA3B,EAA0CC,SAA1C,CAApB;QACD;;QAED,OAAOI,qBAAqB,CAACkB,UAAD,EAAavB,aAAb,EAA4BM,YAA5B,EAA0CC,OAA1C,EAAmD,CAACS,GAAD,EAAM,GAAGS,MAAH,CAAUD,KAAV,CAAN,CAAnD,CAA5B;MACD,CANe,CAAhB;MAOA;IACD;;IAEDf,QAAQ,CAACO,GAAD,CAAR,GAAgBlB,aAAa,CAACuB,SAAD,EAAYD,UAAU,IAAIpB,aAA1B,EAAyCC,SAAzC,CAA7B;EACD,CAxCD;EAyCA,OAAOQ,QAAP;AACD,CAnDD;;AAqDA,eAAeJ,qBAAf"},"metadata":{},"sourceType":"module"}