import "antd/es/layout/style";
import _Layout from "antd/es/layout";
import _taggedTemplateLiteral from "@babel/runtime/helpers/esm/taggedTemplateLiteral";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _regeneratorRuntime from "@babel/runtime/helpers/esm/regeneratorRuntime";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import "antd/es/config-provider/style";
import _ConfigProvider from "antd/es/config-provider";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";

var _templateObject, _templateObject2;

var _excluded = ["id", "defaultMessage"],
    _excluded2 = ["fixSiderbar", "navTheme", "layout"];
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { ConfigProviderWrap } from '@ant-design/pro-provider';
import { isBrowser, useDocumentTitle, useMountMergeState } from '@ant-design/pro-utils';
import { getMatchMenu } from '@umijs/route-utils';
import classNames from 'classnames';
import Omit from 'omit.js';
import useMergedState from "rc-util/es/hooks/useMergedState";
import warning from "rc-util/es/warning";
import { useCallback, useContext, useEffect, useMemo, useState } from 'react';
import useSWR, { useSWRConfig } from 'swr';
import useAntdMediaQuery from 'use-media-antd-query';
import { PageLoading } from './components/PageLoading';
import { SiderMenu } from './components/SiderMenu';
import { MenuCounter } from './components/SiderMenu/Counter';
import { defaultSettings } from './defaultSettings';
import { css, cx } from './emotion';
import { DefaultFooter as Footer } from './Footer';
import { getPageTitleInfo } from './getPageTitle';
import { DefaultHeader as Header } from './Header';
import { gLocaleObject } from './locales';
import { Logo } from './Logo';
import { ProLayoutContext, ProLayoutProvider } from './ProLayoutContext';
import { RouteContext } from './RouteContext';
import { getBreadcrumbProps } from './utils/getBreadcrumbProps';
import { getMenuData } from './utils/getMenuData';
import { useCurrentMenuLayoutProps } from './utils/useCurrentMenuLayoutProps';
import { clearMenuItem } from './utils/utils';
import { WrapContent } from './WrapContent';
var layoutIndex = 0;

var headerRender = function headerRender(props, matchMenuKeys) {
  if (props.headerRender === false || props.pure) {
    return null;
  }

  return _jsx(Header, _objectSpread({
    matchMenuKeys: matchMenuKeys
  }, props));
};

var footerRender = function footerRender(props) {
  if (props.footerRender === false || props.pure) {
    return null;
  }

  if (props.footerRender) {
    return props.footerRender(_objectSpread({}, props), _jsx(Footer, {}));
  }

  return null;
};

var renderSiderMenu = function renderSiderMenu(props, matchMenuKeys) {
  var layout = props.layout,
      navTheme = props.navTheme,
      isMobile = props.isMobile,
      openKeys = props.openKeys,
      splitMenus = props.splitMenus,
      menuRender = props.menuRender;

  if (props.menuRender === false || props.pure) {
    return null;
  }

  var menuData = props.menuData;
  /** Â¶ÇÊûúÊòØÂàÜÂâ≤ËèúÂçïÊ®°ÂºèÔºåÈúÄË¶Å‰∏ìÈó®ÂÆûÁé∞‰∏Ä‰∏ã */

  if (splitMenus && (openKeys !== false || layout === 'mix') && !isMobile) {
    var _matchMenuKeys = _slicedToArray(matchMenuKeys, 1),
        key = _matchMenuKeys[0];

    if (key) {
      var _props$menuData, _props$menuData$find;

      menuData = ((_props$menuData = props.menuData) === null || _props$menuData === void 0 ? void 0 : (_props$menuData$find = _props$menuData.find(function (item) {
        return item.key === key;
      })) === null || _props$menuData$find === void 0 ? void 0 : _props$menuData$find.routes) || [];
    } else {
      menuData = [];
    }
  } // ËøôÈáåËµ∞‰∫ÜÂèØ‰ª•Â∞ë‰∏ÄÊ¨°Âæ™ÁéØ


  var clearMenuData = clearMenuItem(menuData || []);

  if (clearMenuData && (clearMenuData === null || clearMenuData === void 0 ? void 0 : clearMenuData.length) < 1 && splitMenus) {
    return null;
  }

  if (layout === 'top' && !isMobile) {
    return _jsx(SiderMenu, _objectSpread(_objectSpread({
      matchMenuKeys: matchMenuKeys
    }, props), {}, {
      hide: true
    }));
  }

  var defaultDom = _jsx(SiderMenu, _objectSpread(_objectSpread({
    matchMenuKeys: matchMenuKeys
  }, props), {}, {
    style: navTheme === 'realDark' ? {
      boxShadow: '0 2px 8px 0 rgba(0, 0, 0, 65%)'
    } : {},
    // ËøôÈáåËµ∞‰∫ÜÂèØ‰ª•Â∞ë‰∏ÄÊ¨°Âæ™ÁéØ
    menuData: clearMenuData
  }));

  if (menuRender) {
    return menuRender(props, defaultDom);
  }

  return defaultDom;
};

var defaultPageTitleRender = function defaultPageTitleRender(pageProps, props) {
  var pageTitleRender = props.pageTitleRender;
  var pageTitleInfo = getPageTitleInfo(pageProps);

  if (pageTitleRender === false) {
    return {
      title: props.title || '',
      id: '',
      pageName: ''
    };
  }

  if (pageTitleRender) {
    var title = pageTitleRender(pageProps, pageTitleInfo.title, pageTitleInfo);

    if (typeof title === 'string') {
      return _objectSpread(_objectSpread({}, pageTitleInfo), {}, {
        title: title
      });
    }

    warning(typeof title === 'string', 'pro-layout: renderPageTitle return value should be a string');
  }

  return pageTitleInfo;
};

var getPaddingLeft = function getPaddingLeft(hasLeftPadding, collapsed, siderWidth) {
  if (hasLeftPadding) {
    return collapsed ? 60 : siderWidth;
  }

  return 0;
};
/**
 * üåÉ Powerful and easy to use beautiful layout üèÑ‚Äç Support multiple topics and layout types
 *
 * @param props
 */


var BaseProLayout = function BaseProLayout(props) {
  var _props$prefixCls, _classNames, _location$pathname, _classNames2;

  var _ref = props || {},
      children = _ref.children,
      propsOnCollapse = _ref.onCollapse,
      _ref$location = _ref.location,
      location = _ref$location === void 0 ? {
    pathname: '/'
  } : _ref$location,
      contentStyle = _ref.contentStyle,
      route = _ref.route,
      defaultCollapsed = _ref.defaultCollapsed,
      style = _ref.style,
      disableContentMargin = _ref.disableContentMargin,
      propsSiderWidth = _ref.siderWidth,
      menu = _ref.menu,
      propsIsChildrenLayout = _ref.isChildrenLayout,
      menuDataRender = _ref.menuDataRender,
      actionRef = _ref.actionRef,
      layoutBgImgList = _ref.layoutBgImgList,
      propsFormatMessage = _ref.formatMessage,
      loading = _ref.loading;

  var designToken = useContext(ProLayoutContext);
  var siderWidth = useMemo(function () {
    if (propsSiderWidth) return propsSiderWidth;
    if (props.layout === 'mix') return 215;
    return 256;
  }, [props.layout, propsSiderWidth]);
  var context = useContext(_ConfigProvider.ConfigContext);
  var prefixCls = (_props$prefixCls = props.prefixCls) !== null && _props$prefixCls !== void 0 ? _props$prefixCls : context.getPrefixCls('pro'); // ËÆæÁΩÆ‰∏ªÈ¢ò

  useEffect(function () {
    _ConfigProvider.config({
      theme: {
        primaryColor: designToken.primaryColor,
        infoColor: designToken.infoColor,
        successColor: designToken.successColor,
        // processingColor: designToken.processingColor,
        errorColor: designToken.errorColor,
        warningColor: designToken.warningColor
      }
    });
  }, [designToken.errorColor, designToken.infoColor, designToken.primaryColor, // designToken.processingColor,
  designToken.successColor, designToken.warningColor]);

  var _useMountMergeState = useMountMergeState(false, {
    value: menu === null || menu === void 0 ? void 0 : menu.loading,
    onChange: menu === null || menu === void 0 ? void 0 : menu.onLoadingChange
  }),
      _useMountMergeState2 = _slicedToArray(_useMountMergeState, 2),
      menuLoading = _useMountMergeState2[0],
      setMenuLoading = _useMountMergeState2[1]; // give a default key for swr


  var _useState = useState(function () {
    layoutIndex += 1;
    return "pro-layout-".concat(layoutIndex);
  }),
      _useState2 = _slicedToArray(_useState, 1),
      defaultId = _useState2[0];

  var formatMessage = useCallback(function (_ref2) {
    var id = _ref2.id,
        defaultMessage = _ref2.defaultMessage,
        restParams = _objectWithoutProperties(_ref2, _excluded);

    if (propsFormatMessage) {
      return propsFormatMessage(_objectSpread({
        id: id,
        defaultMessage: defaultMessage
      }, restParams));
    }

    var locales = gLocaleObject();
    return locales[id] ? locales[id] : defaultMessage;
  }, [propsFormatMessage]);

  var _useSWR = useSWR(function () {
    if (!(menu === null || menu === void 0 ? void 0 : menu.params)) return [defaultId, {}];
    return [defaultId, menu === null || menu === void 0 ? void 0 : menu.params];
  }, /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(_, params) {
      var _menu$request;

      var msg;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              setMenuLoading(true);
              _context.next = 3;
              return menu === null || menu === void 0 ? void 0 : (_menu$request = menu.request) === null || _menu$request === void 0 ? void 0 : _menu$request.call(menu, params, (route === null || route === void 0 ? void 0 : route.routes) || []);

            case 3:
              msg = _context.sent;
              setMenuLoading(false);
              return _context.abrupt("return", msg);

            case 6:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x, _x2) {
      return _ref3.apply(this, arguments);
    };
  }(), {
    revalidateOnFocus: false,
    shouldRetryOnError: false,
    revalidateOnReconnect: false
  }),
      data = _useSWR.data,
      mutate = _useSWR.mutate;

  var _useSWRConfig = useSWRConfig(),
      cache = _useSWRConfig.cache;

  useEffect(function () {
    return function () {
      if (cache instanceof Map) cache.clear();
    }; // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  var menuInfoData = useMemo(function () {
    return getMenuData(data || (route === null || route === void 0 ? void 0 : route.routes) || [], menu, formatMessage, menuDataRender);
  }, [formatMessage, menu, menuDataRender, data, route === null || route === void 0 ? void 0 : route.routes]);

  var _ref4 = menuInfoData || {},
      _ref4$breadcrumb = _ref4.breadcrumb,
      breadcrumb = _ref4$breadcrumb === void 0 ? {} : _ref4$breadcrumb,
      breadcrumbMap = _ref4.breadcrumbMap,
      _ref4$menuData = _ref4.menuData,
      menuData = _ref4$menuData === void 0 ? [] : _ref4$menuData;

  if (actionRef && (menu === null || menu === void 0 ? void 0 : menu.request)) {
    actionRef.current = {
      reload: function reload() {
        mutate();
      }
    };
  }

  var matchMenus = useMemo(function () {
    return getMatchMenu(location.pathname || '/', menuData || [], true);
  }, [location.pathname, menuData]);
  var matchMenuKeys = useMemo(function () {
    return Array.from(new Set(matchMenus.map(function (item) {
      return item.key || item.path || '';
    })));
  }, [matchMenus]); // ÂΩìÂâçÈÄâ‰∏≠ÁöÑmenuÔºå‰∏ÄËà¨‰∏ç‰ºö‰∏∫Á©∫

  var currentMenu = matchMenus[matchMenus.length - 1] || {};
  var currentMenuLayoutProps = useCurrentMenuLayoutProps(currentMenu);

  var _props$currentMenuLay = _objectSpread(_objectSpread({}, props), currentMenuLayoutProps),
      fixSiderbar = _props$currentMenuLay.fixSiderbar,
      navTheme = _props$currentMenuLay.navTheme,
      propsLayout = _props$currentMenuLay.layout,
      rest = _objectWithoutProperties(_props$currentMenuLay, _excluded2);

  var colSize = useAntdMediaQuery();
  var isMobile = (colSize === 'sm' || colSize === 'xs') && !props.disableMobile; // If it is a fix menu, calculate padding
  // don't need padding in phone mode

  var hasLeftPadding = propsLayout !== 'top' && !isMobile;

  var _useMergedState = useMergedState(function () {
    if (process.env.NODE_ENV === 'TEST') {
      return false;
    }

    if (defaultCollapsed !== undefined) {
      return defaultCollapsed;
    }

    if (isMobile) return true;
    if (colSize === 'md') return true;
    return false;
  }, {
    value: props.collapsed,
    onChange: propsOnCollapse
  }),
      _useMergedState2 = _slicedToArray(_useMergedState, 2),
      collapsed = _useMergedState2[0],
      onCollapse = _useMergedState2[1]; // Splicing parameters, adding menuData and formatMessage in props


  var defaultProps = Omit(_objectSpread(_objectSpread(_objectSpread({
    prefixCls: prefixCls
  }, props), {}, {
    siderWidth: siderWidth
  }, currentMenuLayoutProps), {}, {
    formatMessage: formatMessage,
    breadcrumb: breadcrumb,
    menu: _objectSpread(_objectSpread({}, menu), {}, {
      loading: menuLoading
    }),
    layout: propsLayout
  }), ['className', 'style', 'breadcrumbRender']); // gen page title

  var pageTitleInfo = defaultPageTitleRender(_objectSpread(_objectSpread({
    pathname: location.pathname
  }, defaultProps), {}, {
    breadcrumbMap: breadcrumbMap
  }), props); // gen breadcrumbProps, parameter for pageHeader

  var breadcrumbProps = getBreadcrumbProps(_objectSpread(_objectSpread({}, defaultProps), {}, {
    breadcrumbRender: props.breadcrumbRender,
    breadcrumbMap: breadcrumbMap
  }), props); // render sider dom

  var siderMenuDom = renderSiderMenu(_objectSpread(_objectSpread({}, defaultProps), {}, {
    menuData: menuData,
    onCollapse: onCollapse,
    isMobile: isMobile,
    theme: navTheme === 'dark' ? 'dark' : 'light',
    collapsed: collapsed
  }), matchMenuKeys); // render header dom

  var headerDom = headerRender(_objectSpread(_objectSpread({}, defaultProps), {}, {
    children: null,
    hasSiderMenu: !!siderMenuDom,
    menuData: menuData,
    isMobile: isMobile,
    collapsed: collapsed,
    onCollapse: onCollapse,
    theme: navTheme === 'dark' ? 'dark' : 'light'
  }), matchMenuKeys); // render footer dom

  var footerDom = footerRender(_objectSpread({
    isMobile: isMobile,
    collapsed: collapsed
  }, defaultProps));

  var _useContext = useContext(RouteContext),
      contextIsChildrenLayout = _useContext.isChildrenLayout; // Â¶ÇÊûú props ‰∏≠ÂÆö‰πâÔºå‰ª• props ‰∏∫ÂáÜ


  var isChildrenLayout = propsIsChildrenLayout !== undefined ? propsIsChildrenLayout : contextIsChildrenLayout;
  var baseClassName = "".concat(prefixCls, "-basicLayout"); // gen className

  var className = classNames(props.className, 'ant-design-pro', baseClassName, (_classNames = {}, _defineProperty(_classNames, "screen-".concat(colSize), colSize), _defineProperty(_classNames, "".concat(baseClassName, "-top-menu"), propsLayout === 'top'), _defineProperty(_classNames, "".concat(baseClassName, "-is-children"), isChildrenLayout), _defineProperty(_classNames, "".concat(baseClassName, "-fix-siderbar"), fixSiderbar), _defineProperty(_classNames, "".concat(baseClassName, "-").concat(propsLayout), propsLayout), _classNames));
  /** ËÆ°ÁÆó slider ÁöÑÂÆΩÂ∫¶ */

  var leftSiderWidth = getPaddingLeft(!!hasLeftPadding, collapsed, siderWidth); // siderMenuDom ‰∏∫Á©∫ÁöÑÊó∂ÂÄôÔºå‰∏çÈúÄË¶Å padding

  var genLayoutStyle = {
    position: 'relative'
  }; // if is some layout children, don't need min height

  if (isChildrenLayout || contentStyle && contentStyle.minHeight) {
    genLayoutStyle.minHeight = 0;
  }
  /** È°µÈù¢ÂàáÊç¢ÁöÑÊó∂ÂÄôËß¶Âèë */


  useEffect(function () {
    var _props$onPageChange;

    (_props$onPageChange = props.onPageChange) === null || _props$onPageChange === void 0 ? void 0 : _props$onPageChange.call(props, props.location); // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [location.pathname, (_location$pathname = location.pathname) === null || _location$pathname === void 0 ? void 0 : _location$pathname.search]);

  var _useState3 = useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      hasFooterToolbar = _useState4[0],
      setHasFooterToolbar = _useState4[1];

  useDocumentTitle(pageTitleInfo, props.title || false);
  var bgImgStyleList = useMemo(function () {
    if (layoutBgImgList && layoutBgImgList.length > 0) {
      return layoutBgImgList.map(function (item, index) {
        return _jsx("img", {
          src: item.src,
          style: _objectSpread({
            position: 'absolute'
          }, item)
        }, index);
      });
    }

    return null;
  }, [layoutBgImgList]);
  var antdPrefixCls = context.getPrefixCls();
  var contentClassName = classNames("".concat(baseClassName, "-content"), (_classNames2 = {}, _defineProperty(_classNames2, "".concat(baseClassName, "-has-header"), headerDom), _defineProperty(_classNames2, "".concat(baseClassName, "-content-disable-margin"), disableContentMargin), _classNames2));
  return _jsx(MenuCounter.Provider, {
    children: _jsx(RouteContext.Provider, {
      value: _objectSpread(_objectSpread({}, defaultProps), {}, {
        breadcrumb: breadcrumbProps,
        menuData: menuData,
        isMobile: isMobile,
        collapsed: collapsed,
        isChildrenLayout: true,
        title: pageTitleInfo.pageName,
        hasSiderMenu: !!siderMenuDom,
        hasHeader: !!headerDom,
        siderWidth: leftSiderWidth,
        hasFooter: !!footerDom,
        hasFooterToolbar: hasFooterToolbar,
        setHasFooterToolbar: setHasFooterToolbar,
        pageTitleInfo: pageTitleInfo,
        matchMenus: matchMenus,
        matchMenuKeys: matchMenuKeys,
        currentMenu: currentMenu
      }),
      children: props.pure ? _jsx(ConfigProviderWrap, {
        autoClearCache: true,
        children: children
      }) : _jsxs("div", {
        className: cx(className, css(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n                // BFC\n                display: flex;\n                flex-direction: column;\n                width: 100%;\n                min-height: 100%;\n                background-color: transparent;\n                .", "-layout {\n                  background: transparent;\n                }\n              "])), antdPrefixCls)),
        children: [_jsx("div", {
          className: css(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n                pointer-events: none;\n                position: fixed;\n                overflow: hidden;\n                top: 0;\n                left: 0;\n                z-index: 0;\n                height: 100%;\n                width: 100%;\n                background: ", ";\n              "])), designToken.layoutBg),
          children: bgImgStyleList
        }), _jsxs(_Layout, {
          style: _objectSpread({
            minHeight: '100%'
          }, style),
          children: [siderMenuDom, _jsxs("div", {
            style: genLayoutStyle,
            className: context.getPrefixCls('layout'),
            children: [headerDom, _jsx(WrapContent, _objectSpread(_objectSpread({
              disableContentMargin: disableContentMargin,
              autoClearCache: false,
              isChildrenLayout: isChildrenLayout
            }, rest), {}, {
              className: contentClassName,
              style: contentStyle,
              children: loading ? _jsx(PageLoading, {}) : children
            })), footerDom]
          })]
        })]
      })
    })
  });
};

BaseProLayout.defaultProps = _objectSpread(_objectSpread({
  logo: _jsx(Logo, {})
}, defaultSettings), {}, {
  location: isBrowser() ? window.location : undefined
});

var ProLayout = function ProLayout(props) {
  return _jsx(ProLayoutProvider, {
    token: props.token,
    children: _jsx(BaseProLayout, _objectSpread({}, props))
  });
};

export { ProLayout };