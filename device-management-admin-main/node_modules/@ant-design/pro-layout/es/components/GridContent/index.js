import _taggedTemplateLiteral from "@babel/runtime/helpers/esm/taggedTemplateLiteral";
import "antd/es/config-provider/style";
import _ConfigProvider from "antd/es/config-provider";

var _templateObject, _templateObject2;

import { jsx as _jsx } from "react/jsx-runtime";
import { useContext } from 'react';
import { css, cx } from '../../emotion';
import { RouteContext } from '../../RouteContext';
/**
 * This component can support contentWidth so you don't need to calculate the width
 * contentWidth=Fixed, width will is 1200
 *
 * @param props
 */

var GridContent = function GridContent(props) {
  var value = useContext(RouteContext);
  var children = props.children,
      propsContentWidth = props.contentWidth,
      propsClassName = props.className,
      style = props.style;

  var _useContext = useContext(_ConfigProvider.ConfigContext),
      getPrefixCls = _useContext.getPrefixCls;

  var prefixCls = props.prefixCls || getPrefixCls('pro');
  var contentWidth = propsContentWidth || value.contentWidth;
  var className = "".concat(prefixCls, "-grid-content");
  var isWide = contentWidth === 'Fixed';
  return _jsx("div", {
    className: cx(className, propsClassName, {
      wide: isWide
    }, css(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n          width: 100%;\n          .", "-card:not(.", "-card-ghost) {\n            border-radius: 6px;\n            box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.05), 0 1px 2px 0 rgba(25, 15, 15, 0.07),\n              0 0 1px 0 rgba(0, 0, 0, 0.08);\n          }\n        "])), prefixCls, prefixCls), isWide && css(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n            max-width: 1152px;\n            margin: 0 auto;\n          "])))),
    style: style,
    children: _jsx("div", {
      className: "".concat(prefixCls, "-grid-content-children"),
      children: children
    })
  });
};

export { GridContent };