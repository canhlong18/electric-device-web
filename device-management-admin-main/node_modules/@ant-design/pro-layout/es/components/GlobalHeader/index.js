import _taggedTemplateLiteral from "@babel/runtime/helpers/esm/taggedTemplateLiteral";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import "antd/es/config-provider/style";
import _ConfigProvider from "antd/es/config-provider";

var _templateObject, _templateObject2, _templateObject3, _templateObject4;

import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { MenuFoldOutlined, MenuUnfoldOutlined } from '@ant-design/icons';
import classNames from 'classnames';
import { useContext } from 'react';
import { css, cx } from '../../emotion';
import { ProLayoutContext } from '../../ProLayoutContext';
import { clearMenuItem } from '../../utils/utils';
import { AppsLogoComponents, defaultRenderLogo } from '../AppsLogoComponents';
import { renderLogoAndTitle } from '../SiderMenu/SiderMenu';
import { RightContent, TopNavHeader } from '../TopNavHeader';

var renderLogo = function renderLogo(menuHeaderRender, logoDom) {
  if (menuHeaderRender === false) {
    return null;
  }

  if (menuHeaderRender) {
    return menuHeaderRender(logoDom, null);
  }

  return logoDom;
};

var GlobalHeader = function GlobalHeader(props) {
  var isMobile = props.isMobile,
      logo = props.logo,
      collapsed = props.collapsed,
      onCollapse = props.onCollapse,
      rightContentRender = props.rightContentRender,
      menuHeaderRender = props.menuHeaderRender,
      onMenuHeaderClick = props.onMenuHeaderClick,
      propClassName = props.className,
      style = props.style,
      layout = props.layout,
      children = props.children,
      _props$headerTheme = props.headerTheme,
      headerTheme = _props$headerTheme === void 0 ? 'dark' : _props$headerTheme,
      splitMenus = props.splitMenus,
      menuData = props.menuData,
      prefixCls = props.prefixCls;
  var designToken = useContext(ProLayoutContext);

  var _useContext = useContext(_ConfigProvider.ConfigContext),
      direction = _useContext.direction;

  var baseClassName = "".concat(prefixCls, "-global-header");
  var className = classNames(propClassName, baseClassName, _defineProperty({}, "".concat(baseClassName, "-layout-").concat(layout), layout && headerTheme === 'dark'));

  if (layout === 'mix' && !isMobile && splitMenus) {
    var noChildrenMenuData = (menuData || []).map(function (item) {
      return _objectSpread(_objectSpread({}, item), {}, {
        children: undefined,
        routes: undefined
      });
    });
    var clearMenuData = clearMenuItem(noChildrenMenuData);
    return _jsx(TopNavHeader, _objectSpread(_objectSpread({
      mode: "horizontal"
    }, props), {}, {
      splitMenus: false,
      menuData: clearMenuData,
      theme: headerTheme
    }));
  }

  var logoClassNames = classNames("".concat(baseClassName, "-logo"), _defineProperty({}, "".concat(baseClassName, "-logo-rtl"), direction === 'rtl'));

  var logoDom = _jsx("span", {
    className: cx(logoClassNames, css(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n          position: relative;\n          min-width: ", ";\n          margin-right: ", ";\n          a {\n            display: flex;\n            align-items: center;\n            height: 100%;\n            min-height: 22px;\n            font-size: 22px;\n            img {\n              height: 28px;\n            }\n            h1 {\n              height: 32px;\n              margin: 0 0 0 8px;\n              color: ", ";\n              font-weight: 600;\n              font-size: 18px;\n              line-height: 32px;\n            }\n          }\n        "])), isMobile ? '24px' : '154px', isMobile ? '0' : '16px', designToken.colorHeading)),
    children: _jsx("a", {
      children: defaultRenderLogo(logo)
    })
  }, "logo");

  return _jsxs("div", {
    className: cx(className, css(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n          position: relative;\n          display: flex;\n          align-items: center;\n          height: 100%;\n          padding: 0 16px;\n\n          > a {\n            height: 100%;\n          }\n\n          .", "-basicLayout-apps-icon {\n            margin-right: 16px;\n          }\n        "])), prefixCls)),
    style: _objectSpread({}, style),
    children: [isMobile && renderLogo(menuHeaderRender, logoDom), isMobile && _jsx("span", {
      className: cx("".concat(baseClassName, "-collapsed-button"), css(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n              display: flex;\n              align-items: center;\n              margin-left: 16px;\n              font-size: 20px;\n            "])))),
      onClick: function onClick() {
        onCollapse === null || onCollapse === void 0 ? void 0 : onCollapse(!collapsed);
      },
      children: collapsed ? _jsx(MenuUnfoldOutlined, {}) : _jsx(MenuFoldOutlined, {})
    }), layout === 'mix' && !isMobile && _jsxs(_Fragment, {
      children: [_jsx(AppsLogoComponents, _objectSpread({}, props)), _jsx("div", {
        className: cx(logoClassNames, css(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n                position: relative;\n                min-width: 156px;\n                margin-right: ", ";\n                a {\n                  display: flex;\n                  align-items: center;\n                  height: 100%;\n                  min-height: 22px;\n                  font-size: 22px;\n                  img {\n                    height: 28px;\n                  }\n                  h1 {\n                    height: 32px;\n                    margin: 0 0 0 8px;\n                    color: ", ";\n                    font-weight: 600;\n                    font-size: 18px;\n                    line-height: 32px;\n                  }\n                }\n              "])), isMobile ? '0' : '16px', designToken.colorHeading)),
        onClick: onMenuHeaderClick,
        children: renderLogoAndTitle(_objectSpread(_objectSpread({}, props), {}, {
          collapsed: false
        }), 'headerTitleRender')
      })]
    }), _jsx("div", {
      style: {
        flex: 1
      },
      children: children
    }), (rightContentRender || props.actionsRender || props.avatarProps) && _jsx(RightContent, _objectSpread({
      rightContentRender: rightContentRender
    }, props))]
  });
};

export { GlobalHeader };