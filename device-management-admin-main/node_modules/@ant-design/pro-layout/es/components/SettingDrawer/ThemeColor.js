import "antd/es/tooltip/style";
import _Tooltip from "antd/es/tooltip";
import _taggedTemplateLiteral from "@babel/runtime/helpers/esm/taggedTemplateLiteral";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";

var _templateObject, _templateObject2, _templateObject3;

var _excluded = ["color", "check"];
import { jsx as _jsx } from "react/jsx-runtime";
import { CheckOutlined } from '@ant-design/icons';
import React from 'react';
import { css, cx } from '../../emotion';
var Tag = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var color = _ref.color,
      check = _ref.check,
      rest = _objectWithoutProperties(_ref, _excluded);

  return _jsx("div", _objectSpread(_objectSpread({}, rest), {}, {
    style: {
      backgroundColor: color
    },
    ref: ref,
    children: check ? _jsx(CheckOutlined, {}) : ''
  }));
});

var ThemeColor = function ThemeColor(_ref2) {
  var value = _ref2.value,
      colorList = _ref2.colorList,
      onChange = _ref2.onChange,
      formatMessage = _ref2.formatMessage;

  if (!colorList || (colorList === null || colorList === void 0 ? void 0 : colorList.length) < 1) {
    return null;
  }

  return _jsx("div", {
    className: css(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n        margin-top: 16px;\n        overflow: hidden;\n      "]))),
    children: _jsx("div", {
      className: cx('theme-color-content', css(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([""])))),
      children: colorList === null || colorList === void 0 ? void 0 : colorList.map(function (_ref3) {
        var key = _ref3.key,
            color = _ref3.color;
        if (!key) return null;
        return _jsx(_Tooltip, {
          title: formatMessage({
            id: "app.setting.themecolor.".concat(key)
          }),
          children: _jsx(Tag, {
            className: cx('theme-color-block', css(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n                    float: left;\n                    width: 20px;\n                    height: 20px;\n                    margin-top: 8px;\n                    margin-right: 8px;\n                    color: #fff;\n                    font-weight: bold;\n                    text-align: center;\n                    border-radius: 2px;\n                    cursor: pointer;\n                  "])))),
            color: color,
            check: value === color,
            onClick: function onClick() {
              return onChange && onChange(color);
            }
          })
        }, color);
      })
    })
  });
};

export { ThemeColor };