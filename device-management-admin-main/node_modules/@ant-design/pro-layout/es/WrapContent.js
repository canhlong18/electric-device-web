import "antd/es/layout/style";
import _Layout from "antd/es/layout";
import _taggedTemplateLiteral from "@babel/runtime/helpers/esm/taggedTemplateLiteral";
import "antd/es/config-provider/style";
import _ConfigProvider from "antd/es/config-provider";

var _templateObject, _templateObject2;

import { jsx as _jsx } from "react/jsx-runtime";
import { ConfigProviderWrap } from '@ant-design/pro-provider';
import { ErrorBoundary } from '@ant-design/pro-utils';
import { useContext, useMemo } from 'react';
import { css, cx } from './emotion';

var WrapContent = function WrapContent(props) {
  var context = useContext(_ConfigProvider.ConfigContext);
  var _props$autoClearCache = props.autoClearCache,
      autoClearCache = _props$autoClearCache === void 0 ? true : _props$autoClearCache,
      style = props.style,
      className = props.className,
      children = props.children,
      disableContentMargin = props.disableContentMargin;
  var ErrorComponent = props.ErrorBoundary || ErrorBoundary;
  var prefixCls = context.getPrefixCls();
  var ProLayoutCssContent = useMemo(function () {
    if (disableContentMargin) {
      return css(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n        position: relative;\n        > .", "-layout {\n          max-height: 100%;\n        }\n      "])), prefixCls);
    }

    return css(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n      position: relative;\n      margin: 24px;\n      > .", "-layout {\n        max-height: 100%;\n      }\n      .", "-pro-page-container {\n        margin: -24px -24px 0;\n      }\n    "])), prefixCls, prefixCls);
  }, [prefixCls, disableContentMargin]);
  return _jsx(ConfigProviderWrap, {
    autoClearCache: autoClearCache,
    children: props.ErrorBoundary === false ? _jsx(_Layout.Content, {
      className: cx(className, ProLayoutCssContent),
      style: style,
      children: children
    }) : _jsx(ErrorComponent, {
      children: _jsx(_Layout.Content, {
        className: cx(className, ProLayoutCssContent),
        style: style,
        children: children
      })
    })
  });
};

export { WrapContent };