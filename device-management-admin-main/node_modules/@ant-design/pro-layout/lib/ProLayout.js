"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ProLayout = void 0;

require("antd/lib/layout/style");

var _layout = _interopRequireDefault(require("antd/lib/layout"));

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _regeneratorRuntime2 = _interopRequireDefault(require("@babel/runtime/helpers/regeneratorRuntime"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

require("antd/lib/config-provider/style");

var _configProvider = _interopRequireDefault(require("antd/lib/config-provider"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _jsxRuntime = require("react/jsx-runtime");

var _proProvider = require("@ant-design/pro-provider");

var _proUtils = require("@ant-design/pro-utils");

var _routeUtils = require("@umijs/route-utils");

var _classnames = _interopRequireDefault(require("classnames"));

var _omit = _interopRequireDefault(require("omit.js"));

var _useMergedState3 = _interopRequireDefault(require("rc-util/lib/hooks/useMergedState"));

var _warning = _interopRequireDefault(require("rc-util/lib/warning"));

var _react = require("react");

var _swr = _interopRequireWildcard(require("swr"));

var _useMediaAntdQuery = _interopRequireDefault(require("use-media-antd-query"));

var _PageLoading = require("./components/PageLoading");

var _SiderMenu = require("./components/SiderMenu");

var _Counter = require("./components/SiderMenu/Counter");

var _defaultSettings = require("./defaultSettings");

var _emotion = require("./emotion");

var _Footer = require("./Footer");

var _getPageTitle = require("./getPageTitle");

var _Header = require("./Header");

var _locales = require("./locales");

var _Logo = require("./Logo");

var _ProLayoutContext = require("./ProLayoutContext");

var _RouteContext = require("./RouteContext");

var _getBreadcrumbProps = require("./utils/getBreadcrumbProps");

var _getMenuData = require("./utils/getMenuData");

var _useCurrentMenuLayoutProps = require("./utils/useCurrentMenuLayoutProps");

var _utils = require("./utils/utils");

var _WrapContent = require("./WrapContent");

var _templateObject, _templateObject2;

var _excluded = ["id", "defaultMessage"],
    _excluded2 = ["fixSiderbar", "navTheme", "layout"];
var layoutIndex = 0;

var headerRender = function headerRender(props, matchMenuKeys) {
  if (props.headerRender === false || props.pure) {
    return null;
  }

  return (0, _jsxRuntime.jsx)(_Header.DefaultHeader, (0, _objectSpread2.default)({
    matchMenuKeys: matchMenuKeys
  }, props));
};

var footerRender = function footerRender(props) {
  if (props.footerRender === false || props.pure) {
    return null;
  }

  if (props.footerRender) {
    return props.footerRender((0, _objectSpread2.default)({}, props), (0, _jsxRuntime.jsx)(_Footer.DefaultFooter, {}));
  }

  return null;
};

var renderSiderMenu = function renderSiderMenu(props, matchMenuKeys) {
  var layout = props.layout,
      navTheme = props.navTheme,
      isMobile = props.isMobile,
      openKeys = props.openKeys,
      splitMenus = props.splitMenus,
      menuRender = props.menuRender;

  if (props.menuRender === false || props.pure) {
    return null;
  }

  var menuData = props.menuData;
  /** 如果是分割菜单模式，需要专门实现一下 */

  if (splitMenus && (openKeys !== false || layout === 'mix') && !isMobile) {
    var _matchMenuKeys = (0, _slicedToArray2.default)(matchMenuKeys, 1),
        key = _matchMenuKeys[0];

    if (key) {
      var _props$menuData, _props$menuData$find;

      menuData = ((_props$menuData = props.menuData) === null || _props$menuData === void 0 ? void 0 : (_props$menuData$find = _props$menuData.find(function (item) {
        return item.key === key;
      })) === null || _props$menuData$find === void 0 ? void 0 : _props$menuData$find.routes) || [];
    } else {
      menuData = [];
    }
  } // 这里走了可以少一次循环


  var clearMenuData = (0, _utils.clearMenuItem)(menuData || []);

  if (clearMenuData && (clearMenuData === null || clearMenuData === void 0 ? void 0 : clearMenuData.length) < 1 && splitMenus) {
    return null;
  }

  if (layout === 'top' && !isMobile) {
    return (0, _jsxRuntime.jsx)(_SiderMenu.SiderMenu, (0, _objectSpread2.default)((0, _objectSpread2.default)({
      matchMenuKeys: matchMenuKeys
    }, props), {}, {
      hide: true
    }));
  }

  var defaultDom = (0, _jsxRuntime.jsx)(_SiderMenu.SiderMenu, (0, _objectSpread2.default)((0, _objectSpread2.default)({
    matchMenuKeys: matchMenuKeys
  }, props), {}, {
    style: navTheme === 'realDark' ? {
      boxShadow: '0 2px 8px 0 rgba(0, 0, 0, 65%)'
    } : {},
    // 这里走了可以少一次循环
    menuData: clearMenuData
  }));

  if (menuRender) {
    return menuRender(props, defaultDom);
  }

  return defaultDom;
};

var defaultPageTitleRender = function defaultPageTitleRender(pageProps, props) {
  var pageTitleRender = props.pageTitleRender;
  var pageTitleInfo = (0, _getPageTitle.getPageTitleInfo)(pageProps);

  if (pageTitleRender === false) {
    return {
      title: props.title || '',
      id: '',
      pageName: ''
    };
  }

  if (pageTitleRender) {
    var title = pageTitleRender(pageProps, pageTitleInfo.title, pageTitleInfo);

    if (typeof title === 'string') {
      return (0, _objectSpread2.default)((0, _objectSpread2.default)({}, pageTitleInfo), {}, {
        title: title
      });
    }

    (0, _warning.default)(typeof title === 'string', 'pro-layout: renderPageTitle return value should be a string');
  }

  return pageTitleInfo;
};

var getPaddingLeft = function getPaddingLeft(hasLeftPadding, collapsed, siderWidth) {
  if (hasLeftPadding) {
    return collapsed ? 60 : siderWidth;
  }

  return 0;
};
/**
 * 🌃 Powerful and easy to use beautiful layout 🏄‍ Support multiple topics and layout types
 *
 * @param props
 */


var BaseProLayout = function BaseProLayout(props) {
  var _props$prefixCls, _classNames, _location$pathname, _classNames2;

  var _ref = props || {},
      children = _ref.children,
      propsOnCollapse = _ref.onCollapse,
      _ref$location = _ref.location,
      location = _ref$location === void 0 ? {
    pathname: '/'
  } : _ref$location,
      contentStyle = _ref.contentStyle,
      route = _ref.route,
      defaultCollapsed = _ref.defaultCollapsed,
      style = _ref.style,
      disableContentMargin = _ref.disableContentMargin,
      propsSiderWidth = _ref.siderWidth,
      menu = _ref.menu,
      propsIsChildrenLayout = _ref.isChildrenLayout,
      menuDataRender = _ref.menuDataRender,
      actionRef = _ref.actionRef,
      layoutBgImgList = _ref.layoutBgImgList,
      propsFormatMessage = _ref.formatMessage,
      loading = _ref.loading;

  var designToken = (0, _react.useContext)(_ProLayoutContext.ProLayoutContext);
  var siderWidth = (0, _react.useMemo)(function () {
    if (propsSiderWidth) return propsSiderWidth;
    if (props.layout === 'mix') return 215;
    return 256;
  }, [props.layout, propsSiderWidth]);
  var context = (0, _react.useContext)(_configProvider.default.ConfigContext);
  var prefixCls = (_props$prefixCls = props.prefixCls) !== null && _props$prefixCls !== void 0 ? _props$prefixCls : context.getPrefixCls('pro'); // 设置主题

  (0, _react.useEffect)(function () {
    _configProvider.default.config({
      theme: {
        primaryColor: designToken.primaryColor,
        infoColor: designToken.infoColor,
        successColor: designToken.successColor,
        // processingColor: designToken.processingColor,
        errorColor: designToken.errorColor,
        warningColor: designToken.warningColor
      }
    });
  }, [designToken.errorColor, designToken.infoColor, designToken.primaryColor, // designToken.processingColor,
  designToken.successColor, designToken.warningColor]);

  var _useMountMergeState = (0, _proUtils.useMountMergeState)(false, {
    value: menu === null || menu === void 0 ? void 0 : menu.loading,
    onChange: menu === null || menu === void 0 ? void 0 : menu.onLoadingChange
  }),
      _useMountMergeState2 = (0, _slicedToArray2.default)(_useMountMergeState, 2),
      menuLoading = _useMountMergeState2[0],
      setMenuLoading = _useMountMergeState2[1]; // give a default key for swr


  var _useState = (0, _react.useState)(function () {
    layoutIndex += 1;
    return "pro-layout-".concat(layoutIndex);
  }),
      _useState2 = (0, _slicedToArray2.default)(_useState, 1),
      defaultId = _useState2[0];

  var formatMessage = (0, _react.useCallback)(function (_ref2) {
    var id = _ref2.id,
        defaultMessage = _ref2.defaultMessage,
        restParams = (0, _objectWithoutProperties2.default)(_ref2, _excluded);

    if (propsFormatMessage) {
      return propsFormatMessage((0, _objectSpread2.default)({
        id: id,
        defaultMessage: defaultMessage
      }, restParams));
    }

    var locales = (0, _locales.gLocaleObject)();
    return locales[id] ? locales[id] : defaultMessage;
  }, [propsFormatMessage]);

  var _useSWR = (0, _swr.default)(function () {
    if (!(menu === null || menu === void 0 ? void 0 : menu.params)) return [defaultId, {}];
    return [defaultId, menu === null || menu === void 0 ? void 0 : menu.params];
  }, /*#__PURE__*/function () {
    var _ref3 = (0, _asyncToGenerator2.default)( /*#__PURE__*/(0, _regeneratorRuntime2.default)().mark(function _callee(_, params) {
      var _menu$request;

      var msg;
      return (0, _regeneratorRuntime2.default)().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              setMenuLoading(true);
              _context.next = 3;
              return menu === null || menu === void 0 ? void 0 : (_menu$request = menu.request) === null || _menu$request === void 0 ? void 0 : _menu$request.call(menu, params, (route === null || route === void 0 ? void 0 : route.routes) || []);

            case 3:
              msg = _context.sent;
              setMenuLoading(false);
              return _context.abrupt("return", msg);

            case 6:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x, _x2) {
      return _ref3.apply(this, arguments);
    };
  }(), {
    revalidateOnFocus: false,
    shouldRetryOnError: false,
    revalidateOnReconnect: false
  }),
      data = _useSWR.data,
      mutate = _useSWR.mutate;

  var _useSWRConfig = (0, _swr.useSWRConfig)(),
      cache = _useSWRConfig.cache;

  (0, _react.useEffect)(function () {
    return function () {
      if (cache instanceof Map) cache.clear();
    }; // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  var menuInfoData = (0, _react.useMemo)(function () {
    return (0, _getMenuData.getMenuData)(data || (route === null || route === void 0 ? void 0 : route.routes) || [], menu, formatMessage, menuDataRender);
  }, [formatMessage, menu, menuDataRender, data, route === null || route === void 0 ? void 0 : route.routes]);

  var _ref4 = menuInfoData || {},
      _ref4$breadcrumb = _ref4.breadcrumb,
      breadcrumb = _ref4$breadcrumb === void 0 ? {} : _ref4$breadcrumb,
      breadcrumbMap = _ref4.breadcrumbMap,
      _ref4$menuData = _ref4.menuData,
      menuData = _ref4$menuData === void 0 ? [] : _ref4$menuData;

  if (actionRef && (menu === null || menu === void 0 ? void 0 : menu.request)) {
    actionRef.current = {
      reload: function reload() {
        mutate();
      }
    };
  }

  var matchMenus = (0, _react.useMemo)(function () {
    return (0, _routeUtils.getMatchMenu)(location.pathname || '/', menuData || [], true);
  }, [location.pathname, menuData]);
  var matchMenuKeys = (0, _react.useMemo)(function () {
    return Array.from(new Set(matchMenus.map(function (item) {
      return item.key || item.path || '';
    })));
  }, [matchMenus]); // 当前选中的menu，一般不会为空

  var currentMenu = matchMenus[matchMenus.length - 1] || {};
  var currentMenuLayoutProps = (0, _useCurrentMenuLayoutProps.useCurrentMenuLayoutProps)(currentMenu);

  var _props$currentMenuLay = (0, _objectSpread2.default)((0, _objectSpread2.default)({}, props), currentMenuLayoutProps),
      fixSiderbar = _props$currentMenuLay.fixSiderbar,
      navTheme = _props$currentMenuLay.navTheme,
      propsLayout = _props$currentMenuLay.layout,
      rest = (0, _objectWithoutProperties2.default)(_props$currentMenuLay, _excluded2);

  var colSize = (0, _useMediaAntdQuery.default)();
  var isMobile = (colSize === 'sm' || colSize === 'xs') && !props.disableMobile; // If it is a fix menu, calculate padding
  // don't need padding in phone mode

  var hasLeftPadding = propsLayout !== 'top' && !isMobile;

  var _useMergedState = (0, _useMergedState3.default)(function () {
    if (process.env.NODE_ENV === 'TEST') {
      return false;
    }

    if (defaultCollapsed !== undefined) {
      return defaultCollapsed;
    }

    if (isMobile) return true;
    if (colSize === 'md') return true;
    return false;
  }, {
    value: props.collapsed,
    onChange: propsOnCollapse
  }),
      _useMergedState2 = (0, _slicedToArray2.default)(_useMergedState, 2),
      collapsed = _useMergedState2[0],
      onCollapse = _useMergedState2[1]; // Splicing parameters, adding menuData and formatMessage in props


  var defaultProps = (0, _omit.default)((0, _objectSpread2.default)((0, _objectSpread2.default)((0, _objectSpread2.default)({
    prefixCls: prefixCls
  }, props), {}, {
    siderWidth: siderWidth
  }, currentMenuLayoutProps), {}, {
    formatMessage: formatMessage,
    breadcrumb: breadcrumb,
    menu: (0, _objectSpread2.default)((0, _objectSpread2.default)({}, menu), {}, {
      loading: menuLoading
    }),
    layout: propsLayout
  }), ['className', 'style', 'breadcrumbRender']); // gen page title

  var pageTitleInfo = defaultPageTitleRender((0, _objectSpread2.default)((0, _objectSpread2.default)({
    pathname: location.pathname
  }, defaultProps), {}, {
    breadcrumbMap: breadcrumbMap
  }), props); // gen breadcrumbProps, parameter for pageHeader

  var breadcrumbProps = (0, _getBreadcrumbProps.getBreadcrumbProps)((0, _objectSpread2.default)((0, _objectSpread2.default)({}, defaultProps), {}, {
    breadcrumbRender: props.breadcrumbRender,
    breadcrumbMap: breadcrumbMap
  }), props); // render sider dom

  var siderMenuDom = renderSiderMenu((0, _objectSpread2.default)((0, _objectSpread2.default)({}, defaultProps), {}, {
    menuData: menuData,
    onCollapse: onCollapse,
    isMobile: isMobile,
    theme: navTheme === 'dark' ? 'dark' : 'light',
    collapsed: collapsed
  }), matchMenuKeys); // render header dom

  var headerDom = headerRender((0, _objectSpread2.default)((0, _objectSpread2.default)({}, defaultProps), {}, {
    children: null,
    hasSiderMenu: !!siderMenuDom,
    menuData: menuData,
    isMobile: isMobile,
    collapsed: collapsed,
    onCollapse: onCollapse,
    theme: navTheme === 'dark' ? 'dark' : 'light'
  }), matchMenuKeys); // render footer dom

  var footerDom = footerRender((0, _objectSpread2.default)({
    isMobile: isMobile,
    collapsed: collapsed
  }, defaultProps));

  var _useContext = (0, _react.useContext)(_RouteContext.RouteContext),
      contextIsChildrenLayout = _useContext.isChildrenLayout; // 如果 props 中定义，以 props 为准


  var isChildrenLayout = propsIsChildrenLayout !== undefined ? propsIsChildrenLayout : contextIsChildrenLayout;
  var baseClassName = "".concat(prefixCls, "-basicLayout"); // gen className

  var className = (0, _classnames.default)(props.className, 'ant-design-pro', baseClassName, (_classNames = {}, (0, _defineProperty2.default)(_classNames, "screen-".concat(colSize), colSize), (0, _defineProperty2.default)(_classNames, "".concat(baseClassName, "-top-menu"), propsLayout === 'top'), (0, _defineProperty2.default)(_classNames, "".concat(baseClassName, "-is-children"), isChildrenLayout), (0, _defineProperty2.default)(_classNames, "".concat(baseClassName, "-fix-siderbar"), fixSiderbar), (0, _defineProperty2.default)(_classNames, "".concat(baseClassName, "-").concat(propsLayout), propsLayout), _classNames));
  /** 计算 slider 的宽度 */

  var leftSiderWidth = getPaddingLeft(!!hasLeftPadding, collapsed, siderWidth); // siderMenuDom 为空的时候，不需要 padding

  var genLayoutStyle = {
    position: 'relative'
  }; // if is some layout children, don't need min height

  if (isChildrenLayout || contentStyle && contentStyle.minHeight) {
    genLayoutStyle.minHeight = 0;
  }
  /** 页面切换的时候触发 */


  (0, _react.useEffect)(function () {
    var _props$onPageChange;

    (_props$onPageChange = props.onPageChange) === null || _props$onPageChange === void 0 ? void 0 : _props$onPageChange.call(props, props.location); // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [location.pathname, (_location$pathname = location.pathname) === null || _location$pathname === void 0 ? void 0 : _location$pathname.search]);

  var _useState3 = (0, _react.useState)(false),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      hasFooterToolbar = _useState4[0],
      setHasFooterToolbar = _useState4[1];

  (0, _proUtils.useDocumentTitle)(pageTitleInfo, props.title || false);
  var bgImgStyleList = (0, _react.useMemo)(function () {
    if (layoutBgImgList && layoutBgImgList.length > 0) {
      return layoutBgImgList.map(function (item, index) {
        return (0, _jsxRuntime.jsx)("img", {
          src: item.src,
          style: (0, _objectSpread2.default)({
            position: 'absolute'
          }, item)
        }, index);
      });
    }

    return null;
  }, [layoutBgImgList]);
  var antdPrefixCls = context.getPrefixCls();
  var contentClassName = (0, _classnames.default)("".concat(baseClassName, "-content"), (_classNames2 = {}, (0, _defineProperty2.default)(_classNames2, "".concat(baseClassName, "-has-header"), headerDom), (0, _defineProperty2.default)(_classNames2, "".concat(baseClassName, "-content-disable-margin"), disableContentMargin), _classNames2));
  return (0, _jsxRuntime.jsx)(_Counter.MenuCounter.Provider, {
    children: (0, _jsxRuntime.jsx)(_RouteContext.RouteContext.Provider, {
      value: (0, _objectSpread2.default)((0, _objectSpread2.default)({}, defaultProps), {}, {
        breadcrumb: breadcrumbProps,
        menuData: menuData,
        isMobile: isMobile,
        collapsed: collapsed,
        isChildrenLayout: true,
        title: pageTitleInfo.pageName,
        hasSiderMenu: !!siderMenuDom,
        hasHeader: !!headerDom,
        siderWidth: leftSiderWidth,
        hasFooter: !!footerDom,
        hasFooterToolbar: hasFooterToolbar,
        setHasFooterToolbar: setHasFooterToolbar,
        pageTitleInfo: pageTitleInfo,
        matchMenus: matchMenus,
        matchMenuKeys: matchMenuKeys,
        currentMenu: currentMenu
      }),
      children: props.pure ? (0, _jsxRuntime.jsx)(_proProvider.ConfigProviderWrap, {
        autoClearCache: true,
        children: children
      }) : (0, _jsxRuntime.jsxs)("div", {
        className: (0, _emotion.cx)(className, (0, _emotion.css)(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2.default)(["\n                // BFC\n                display: flex;\n                flex-direction: column;\n                width: 100%;\n                min-height: 100%;\n                background-color: transparent;\n                .", "-layout {\n                  background: transparent;\n                }\n              "])), antdPrefixCls)),
        children: [(0, _jsxRuntime.jsx)("div", {
          className: (0, _emotion.css)(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2.default)(["\n                pointer-events: none;\n                position: fixed;\n                overflow: hidden;\n                top: 0;\n                left: 0;\n                z-index: 0;\n                height: 100%;\n                width: 100%;\n                background: ", ";\n              "])), designToken.layoutBg),
          children: bgImgStyleList
        }), (0, _jsxRuntime.jsxs)(_layout.default, {
          style: (0, _objectSpread2.default)({
            minHeight: '100%'
          }, style),
          children: [siderMenuDom, (0, _jsxRuntime.jsxs)("div", {
            style: genLayoutStyle,
            className: context.getPrefixCls('layout'),
            children: [headerDom, (0, _jsxRuntime.jsx)(_WrapContent.WrapContent, (0, _objectSpread2.default)((0, _objectSpread2.default)({
              disableContentMargin: disableContentMargin,
              autoClearCache: false,
              isChildrenLayout: isChildrenLayout
            }, rest), {}, {
              className: contentClassName,
              style: contentStyle,
              children: loading ? (0, _jsxRuntime.jsx)(_PageLoading.PageLoading, {}) : children
            })), footerDom]
          })]
        })]
      })
    })
  });
};

BaseProLayout.defaultProps = (0, _objectSpread2.default)((0, _objectSpread2.default)({
  logo: (0, _jsxRuntime.jsx)(_Logo.Logo, {})
}, _defaultSettings.defaultSettings), {}, {
  location: (0, _proUtils.isBrowser)() ? window.location : undefined
});

var ProLayout = function ProLayout(props) {
  return (0, _jsxRuntime.jsx)(_ProLayoutContext.ProLayoutProvider, {
    token: props.token,
    children: (0, _jsxRuntime.jsx)(BaseProLayout, (0, _objectSpread2.default)({}, props))
  });
};

exports.ProLayout = ProLayout;