"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WrapContent = void 0;

require("antd/lib/layout/style");

var _layout = _interopRequireDefault(require("antd/lib/layout"));

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

require("antd/lib/config-provider/style");

var _configProvider = _interopRequireDefault(require("antd/lib/config-provider"));

var _jsxRuntime = require("react/jsx-runtime");

var _proProvider = require("@ant-design/pro-provider");

var _proUtils = require("@ant-design/pro-utils");

var _react = require("react");

var _emotion = require("./emotion");

var _templateObject, _templateObject2;

var WrapContent = function WrapContent(props) {
  var context = (0, _react.useContext)(_configProvider.default.ConfigContext);
  var _props$autoClearCache = props.autoClearCache,
      autoClearCache = _props$autoClearCache === void 0 ? true : _props$autoClearCache,
      style = props.style,
      className = props.className,
      children = props.children,
      disableContentMargin = props.disableContentMargin;
  var ErrorComponent = props.ErrorBoundary || _proUtils.ErrorBoundary;
  var prefixCls = context.getPrefixCls();
  var ProLayoutCssContent = (0, _react.useMemo)(function () {
    if (disableContentMargin) {
      return (0, _emotion.css)(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2.default)(["\n        position: relative;\n        > .", "-layout {\n          max-height: 100%;\n        }\n      "])), prefixCls);
    }

    return (0, _emotion.css)(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2.default)(["\n      position: relative;\n      margin: 24px;\n      > .", "-layout {\n        max-height: 100%;\n      }\n      .", "-pro-page-container {\n        margin: -24px -24px 0;\n      }\n    "])), prefixCls, prefixCls);
  }, [prefixCls, disableContentMargin]);
  return (0, _jsxRuntime.jsx)(_proProvider.ConfigProviderWrap, {
    autoClearCache: autoClearCache,
    children: props.ErrorBoundary === false ? (0, _jsxRuntime.jsx)(_layout.default.Content, {
      className: (0, _emotion.cx)(className, ProLayoutCssContent),
      style: style,
      children: children
    }) : (0, _jsxRuntime.jsx)(ErrorComponent, {
      children: (0, _jsxRuntime.jsx)(_layout.default.Content, {
        className: (0, _emotion.cx)(className, ProLayoutCssContent),
        style: style,
        children: children
      })
    })
  });
};

exports.WrapContent = WrapContent;