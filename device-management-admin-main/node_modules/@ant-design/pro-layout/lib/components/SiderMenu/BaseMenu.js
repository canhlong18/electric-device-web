"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BaseMenu = void 0;

require("antd/lib/menu/style");

var _menu = _interopRequireDefault(require("antd/lib/menu"));

require("antd/lib/skeleton/style");

var _skeleton = _interopRequireDefault(require("antd/lib/skeleton"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

require("antd/lib/config-provider/style");

var _configProvider = _interopRequireDefault(require("antd/lib/config-provider"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireWildcard(require("react"));

var _jsxRuntime = require("react/jsx-runtime");

var _icons = _interopRequireWildcard(require("@ant-design/icons"));

var _proUtils = require("@ant-design/pro-utils");

var _defaultSettings = require("../../defaultSettings");

var _emotion = require("../../emotion");

var _ProLayoutContext = require("../../ProLayoutContext");

var _utils = require("../../utils/utils");

var _Counter = require("./Counter");

var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11, _templateObject12, _templateObject13, _templateObject14, _templateObject15, _templateObject16, _templateObject17, _templateObject18, _templateObject19;

var IconFont = (0, _icons.createFromIconfontCN)({
  scriptUrl: _defaultSettings.defaultSettings.iconfontUrl
});

var genMenuItemCss = function genMenuItemCss(prefixCls, state) {
  if (state.hasIcon && state.collapsed) {
    return (0, _emotion.cx)("".concat(prefixCls, "-menu-item-title"), !state.collapsedShowTitle && (0, _emotion.css)(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2.default)(["\n          display: none;\n        "]))), state.collapsedShowTitle && (0, _emotion.css)(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2.default)(["\n          text-align: center;\n          font-size: 12px;\n          height: 20px;\n          line-height: 20px;\n          overflow: hidden;\n          text-overflow: ellipsis;\n          white-space: nowrap;\n          width: 100%;\n        "]))));
  }

  return (0, _emotion.cx)("".concat(prefixCls, "-menu-item-title"), state.hasIcon && (0, _emotion.css)(_templateObject3 || (_templateObject3 = (0, _taggedTemplateLiteral2.default)(["\n        margin-left: 8px;\n      "]))));
}; // Allow menu.js config icon as string or ReactNode
//   icon: 'setting',
//   icon: 'icon-geren' #For Iconfont ,
//   icon: 'http://demo.com/icon.png',
//   icon: '/favicon.png',
//   icon: <Icon type="setting" />,


var getIcon = function getIcon(icon) {
  var iconPrefixes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'icon-';

  if (typeof icon === 'string' && icon !== '') {
    if ((0, _proUtils.isUrl)(icon) || (0, _proUtils.isImg)(icon)) {
      return (0, _jsxRuntime.jsx)(_icons.default, {
        component: function component() {
          return (0, _jsxRuntime.jsx)("img", {
            src: icon,
            alt: "icon",
            className: "ant-pro-sider-menu-icon"
          });
        }
      });
    }

    if (icon.startsWith(iconPrefixes)) {
      return (0, _jsxRuntime.jsx)(IconFont, {
        type: icon
      });
    }
  }

  return icon;
};

var MenuUtil = /*#__PURE__*/(0, _createClass2.default)(function MenuUtil(props) {
  var _this = this;

  (0, _classCallCheck2.default)(this, MenuUtil);
  this.props = void 0;

  this.getNavMenuItems = function () {
    var menusData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var level = arguments.length > 1 ? arguments[1] : undefined;
    return menusData.map(function (item) {
      return _this.getSubMenuOrItem(item, level);
    }).filter(function (item) {
      return item;
    }).flat(1);
  };

  this.getSubMenuOrItem = function (item, level) {
    var _this$props = _this.props,
        subMenuItemRender = _this$props.subMenuItemRender,
        prefixCls = _this$props.prefixCls,
        menu = _this$props.menu,
        iconPrefixes = _this$props.iconPrefixes,
        layout = _this$props.layout;
    var isGroup = (menu === null || menu === void 0 ? void 0 : menu.type) === 'group' && layout !== 'top';
    var designToken = _this.props.token;

    var genItemCss = function genItemCss(center) {
      return (0, _emotion.cx)("".concat(prefixCls, "-menu-item"), (0, _emotion.css)(_templateObject4 || (_templateObject4 = (0, _taggedTemplateLiteral2.default)(["\n          display: flex;\n          align-items: center;\n          justify-content: ", ";\n        "])), center ? 'center' : 'flex-start'));
    };

    var name = _this.getIntlName(item);

    var children = (item === null || item === void 0 ? void 0 : item.children) || (item === null || item === void 0 ? void 0 : item.routes);

    if (Array.isArray(children) && children.length > 0) {
      var _this$props$menu, _designToken$sider;

      /** Menu 第一级可以有icon，或者 isGroup 时第二级别也要有 */
      var hasIcon = level === 0 || isGroup && level === 1; //  get defaultTitle by menuItemRender

      var iconDom = getIcon(item.icon, iconPrefixes);
      var defaultTitle = item.icon ? (0, _jsxRuntime.jsxs)("span", {
        className: genItemCss(),
        title: name,
        children: [hasIcon && iconDom, (0, _jsxRuntime.jsx)("span", {
          className: genMenuItemCss(prefixCls, {
            hasIcon: hasIcon && !!iconDom,
            collapsed: _this.props.collapsed,
            collapsedShowTitle: (_this$props$menu = _this.props.menu) === null || _this$props$menu === void 0 ? void 0 : _this$props$menu.collapsedShowTitle
          }),
          children: name
        })]
      }) : (0, _jsxRuntime.jsx)("span", {
        className: genItemCss(),
        title: name,
        children: name
      }); // subMenu only title render

      var title = subMenuItemRender ? subMenuItemRender((0, _objectSpread2.default)((0, _objectSpread2.default)({}, item), {}, {
        isUrl: false
      }), defaultTitle, _this.props) : defaultTitle;

      var childrenList = _this.getNavMenuItems(children, level + 1);

      if (isGroup && level === 0 && _this.props.collapsed && !menu.collapsedShowGroupTitle) {
        return childrenList;
      }

      return [{
        type: isGroup && level === 0 ? 'group' : undefined,
        key: item.key || item.path,
        title: item.tooltip || title,
        label: title,
        onClick: isGroup ? undefined : item.onTitleClick,
        children: childrenList
      }, isGroup && level === 0 ? {
        type: 'divider',
        prefixCls: prefixCls,
        key: (item.key || item.path) + '-group',
        style: {
          padding: 0,
          margin: _this.props.collapsed ? '4px' : '12px 16px',
          borderColor: designToken === null || designToken === void 0 ? void 0 : (_designToken$sider = designToken.sider) === null || _designToken$sider === void 0 ? void 0 : _designToken$sider.menuItemDividerColor
        }
      } : undefined].filter(Boolean);
    }

    return {
      title: item.tooltip || name,
      disabled: item.disabled,
      key: item.key || item.path,
      onClick: item.onTitleClick,
      label: _this.getMenuItemPath(item, level)
    };
  };

  this.getIntlName = function (item) {
    var name = item.name,
        locale = item.locale;
    var _this$props2 = _this.props,
        menu = _this$props2.menu,
        formatMessage = _this$props2.formatMessage;

    if (locale && (menu === null || menu === void 0 ? void 0 : menu.locale) !== false) {
      return formatMessage === null || formatMessage === void 0 ? void 0 : formatMessage({
        id: locale,
        defaultMessage: name
      });
    }

    return name;
  };

  this.getMenuItemPath = function (item, level) {
    var _this$props$menu2;

    var itemPath = _this.conversionPath(item.path || '/');

    var _this$props3 = _this.props,
        _this$props3$location = _this$props3.location,
        location = _this$props3$location === void 0 ? {
      pathname: '/'
    } : _this$props3$location,
        isMobile = _this$props3.isMobile,
        onCollapse = _this$props3.onCollapse,
        menuItemRender = _this$props3.menuItemRender,
        iconPrefixes = _this$props3.iconPrefixes,
        collapsed = _this$props3.collapsed; // if local is true formatMessage all name。

    var name = _this.getIntlName(item);

    var _this$props4 = _this.props,
        prefixCls = _this$props4.prefixCls,
        menu = _this$props4.menu;
    var isGroup = (menu === null || menu === void 0 ? void 0 : menu.type) === 'group';
    /** Menu 第一级可以有icon，或者 isGroup 时第二级别也要有 */

    var hasIcon = level === 0 || isGroup && level === 1;
    var icon = !hasIcon ? null : getIcon(item.icon, iconPrefixes);
    var defaultItem = (0, _jsxRuntime.jsxs)("span", {
      className: (0, _emotion.cx)("".concat(prefixCls, "-menu-item"), (0, _emotion.css)({
        display: 'flex',
        alignItems: 'center'
      })),
      children: [icon, (0, _jsxRuntime.jsx)("span", {
        className: genMenuItemCss(prefixCls, {
          hasIcon: !!icon && hasIcon,
          collapsed: collapsed,
          collapsedShowTitle: (_this$props$menu2 = _this.props.menu) === null || _this$props$menu2 === void 0 ? void 0 : _this$props$menu2.collapsedShowTitle
        }),
        children: name
      })]
    });
    var isHttpUrl = (0, _proUtils.isUrl)(itemPath); // Is it a http link

    if (isHttpUrl) {
      var _this$props$menu3;

      defaultItem = (0, _jsxRuntime.jsxs)("span", {
        title: name,
        onClick: function onClick() {
          var _window, _window$open;

          (_window = window) === null || _window === void 0 ? void 0 : (_window$open = _window.open) === null || _window$open === void 0 ? void 0 : _window$open.call(_window, itemPath, '_blank');
        },
        className: "".concat(prefixCls, "-menu-item ").concat(prefixCls, "-menu-item-link"),
        children: [icon, (0, _jsxRuntime.jsx)("span", {
          className: genMenuItemCss(prefixCls, {
            hasIcon: hasIcon && !!icon,
            collapsed: _this.props.collapsed,
            collapsedShowTitle: (_this$props$menu3 = _this.props.menu) === null || _this$props$menu3 === void 0 ? void 0 : _this$props$menu3.collapsedShowTitle
          }),
          children: name
        })]
      });
    }

    if (menuItemRender) {
      var renderItemProps = (0, _objectSpread2.default)((0, _objectSpread2.default)({}, item), {}, {
        isUrl: isHttpUrl,
        itemPath: itemPath,
        isMobile: isMobile,
        replace: itemPath === location.pathname,
        onClick: function onClick() {
          return onCollapse && onCollapse(true);
        },
        children: undefined
      });
      return menuItemRender(renderItemProps, defaultItem, _this.props);
    }

    return defaultItem;
  };

  this.conversionPath = function (path) {
    if (path && path.indexOf('http') === 0) {
      return path;
    }

    return "/".concat(path || '').replace(/\/+/g, '/');
  };

  this.props = props;
});
/**
 * 生成openKeys 的对象，因为设置了openKeys 就会变成受控，所以需要一个空对象
 *
 * @param BaseMenuProps
 */

var getOpenKeysProps = function getOpenKeysProps(openKeys, _ref) {
  var layout = _ref.layout,
      collapsed = _ref.collapsed;
  var openKeysProps = {};

  if (openKeys && !collapsed && ['side', 'mix'].includes(layout || 'mix')) {
    openKeysProps = {
      openKeys: openKeys
    };
  }

  return openKeysProps;
};

var BaseMenu = function BaseMenu(props) {
  var mode = props.mode,
      className = props.className,
      prefixCls = props.prefixCls,
      handleOpenChange = props.handleOpenChange,
      style = props.style,
      menuData = props.menuData,
      menu = props.menu,
      matchMenuKeys = props.matchMenuKeys,
      iconfontUrl = props.iconfontUrl,
      collapsed = props.collapsed,
      propsSelectedKeys = props.selectedKeys,
      onSelect = props.onSelect,
      menuRenderType = props.menuRenderType,
      propsOpenKeys = props.openKeys;
  var designToken = (0, _react.useContext)(_ProLayoutContext.ProLayoutContext);
  var menuDesignToken = menuRenderType === 'header' ? designToken.header : designToken.sider;
  var context = (0, _react.useContext)(_configProvider.default.ConfigContext);
  var antPrefixClassName = context.getPrefixCls(); // 用于减少 defaultOpenKeys 计算的组件

  var defaultOpenKeysRef = (0, _react.useRef)([]);

  var _MenuCounter$useConta = _Counter.MenuCounter.useContainer(),
      flatMenuKeys = _MenuCounter$useConta.flatMenuKeys;

  var _useMountMergeState = (0, _proUtils.useMountMergeState)(menu === null || menu === void 0 ? void 0 : menu.defaultOpenAll),
      _useMountMergeState2 = (0, _slicedToArray2.default)(_useMountMergeState, 2),
      defaultOpenAll = _useMountMergeState2[0],
      setDefaultOpenAll = _useMountMergeState2[1];

  var _useMountMergeState3 = (0, _proUtils.useMountMergeState)(function () {
    if (menu === null || menu === void 0 ? void 0 : menu.defaultOpenAll) {
      return (0, _utils.getOpenKeysFromMenuData)(menuData) || [];
    }

    if (propsOpenKeys === false) {
      return false;
    }

    return [];
  }, {
    value: propsOpenKeys === false ? undefined : propsOpenKeys,
    onChange: handleOpenChange
  }),
      _useMountMergeState4 = (0, _slicedToArray2.default)(_useMountMergeState3, 2),
      openKeys = _useMountMergeState4[0],
      setOpenKeys = _useMountMergeState4[1];

  var _useMountMergeState5 = (0, _proUtils.useMountMergeState)([], {
    value: propsSelectedKeys,
    onChange: onSelect ? function (keys) {
      if (onSelect && keys) {
        onSelect(keys);
      }
    } : undefined
  }),
      _useMountMergeState6 = (0, _slicedToArray2.default)(_useMountMergeState5, 2),
      selectedKeys = _useMountMergeState6[0],
      setSelectedKeys = _useMountMergeState6[1];

  (0, _react.useEffect)(function () {
    if ((menu === null || menu === void 0 ? void 0 : menu.defaultOpenAll) || propsOpenKeys === false || flatMenuKeys.length) {
      return;
    }

    if (matchMenuKeys) {
      setOpenKeys(matchMenuKeys);
      setSelectedKeys(matchMenuKeys);
    } // eslint-disable-next-line react-hooks/exhaustive-deps

  }, [matchMenuKeys.join('-')]);
  (0, _react.useEffect)(function () {
    // reset IconFont
    if (iconfontUrl) {
      IconFont = (0, _icons.createFromIconfontCN)({
        scriptUrl: iconfontUrl
      });
    }
  }, [iconfontUrl]);
  (0, _react.useEffect)(function () {
    // if pathname can't match, use the nearest parent's key
    if (matchMenuKeys.join('-') !== (selectedKeys || []).join('-')) {
      setSelectedKeys(matchMenuKeys);
    }

    if (!defaultOpenAll && propsOpenKeys !== false && matchMenuKeys.join('-') !== (openKeys || []).join('-')) {
      var newKeys = matchMenuKeys; // 如果不自动关闭，我需要把 openKeys 放进去

      if ((menu === null || menu === void 0 ? void 0 : menu.autoClose) === false) {
        newKeys = Array.from(new Set([].concat((0, _toConsumableArray2.default)(matchMenuKeys), (0, _toConsumableArray2.default)(openKeys || []))));
      }

      setOpenKeys(newKeys);
    } else if ((menu === null || menu === void 0 ? void 0 : menu.ignoreFlatMenu) && defaultOpenAll) {
      // 忽略用户手动折叠过的菜单状态，折叠按钮切换之后也可实现默认展开所有菜单
      setOpenKeys((0, _utils.getOpenKeysFromMenuData)(menuData));
    } else if (flatMenuKeys.length > 0) setDefaultOpenAll(false);
  }, // eslint-disable-next-line react-hooks/exhaustive-deps
  [matchMenuKeys.join('-')]);
  var openKeysProps = (0, _react.useMemo)(function () {
    return getOpenKeysProps(openKeys, props);
  }, // eslint-disable-next-line react-hooks/exhaustive-deps
  [openKeys && openKeys.join(','), props.layout, props.collapsed]);
  var menuUtils = (0, _react.useMemo)(function () {
    return new MenuUtil((0, _objectSpread2.default)((0, _objectSpread2.default)({}, props), {}, {
      token: designToken,
      menuRenderType: menuRenderType
    }));
  }, [designToken, menuRenderType, props]);
  var menuItemCssMap = (0, _react.useMemo)(function () {
    var itemHoverColor = !collapsed ? menuDesignToken.menuItemHoverBgColor : menuDesignToken.menuItemCollapsedHoverBgColor; // 顶部 选中之后要有背景色，文件颜色也要变深

    var itemSelectedColor = !collapsed ? menuDesignToken.menuItemSelectedBgColor : menuDesignToken.menuItemCollapsedSelectedBgColor;
    return {
      menuItem: (0, _emotion.css)(_templateObject5 || (_templateObject5 = (0, _taggedTemplateLiteral2.default)(["\n        border-radius: ", ";\n        min-height: 40px;\n        display: flex;\n        align-items: center;\n        transition: background-color 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);\n        cursor: pointer;\n        line-height: 40px;\n\n        .", "-menu-title-content {\n          display: flex;\n          width: 100%;\n          height: 100%;\n          color: ", ";\n          font-size: 14px;\n          line-height: 40px;\n          transition: all 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);\n\n          > * {\n            width: 100%;\n            height: 100%;\n            color: ", ";\n            .anticon {\n              color: ", ";\n              opacity: 0.69;\n            }\n          }\n        }\n      "])), designToken.borderRadiusBase, antPrefixClassName, menuDesignToken.menuTextColor, menuDesignToken.menuTextColor, menuDesignToken.menuTextColor),
      collapsedItemShowTitle: (0, _emotion.css)(_templateObject6 || (_templateObject6 = (0, _taggedTemplateLiteral2.default)(["\n        margin-top: 12px;\n        margin-bottom: 12px;\n        .", "-menu-item {\n          padding-top: 6px;\n          padding-bottom: 6px;\n        }\n      "])), prefixCls),
      collapsedItem: (0, _emotion.css)(_templateObject7 || (_templateObject7 = (0, _taggedTemplateLiteral2.default)(["\n        .", "-menu-title-content {\n          ", "\n        }\n        .", "-menu-item {\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          justify-content: center;\n          width: 100%;\n          padding-top: 6px;\n          padding-bottom: 6px;\n          color: ", ";\n          font-size: 16px;\n        }\n      "])), antPrefixClassName, mode !== 'horizontal' ? 'width: 100%; line-height: 40px;' : '', prefixCls, menuDesignToken.menuTextColor),
      horizontalMenuItem: (0, _emotion.css)(_templateObject8 || (_templateObject8 = (0, _taggedTemplateLiteral2.default)(["\n        flex-direction: column;\n        align-items: center;\n        justify-content: center;\n        .", "-menu-item {\n          padding: ", ";\n        }\n        .", "-title-content:hover {\n          background-color: ", ";\n          border-radius: ", ";\n        }\n        &:hover {\n          background-color: ", ";\n          border-radius: ", ";\n          > * {\n            color: ", ";\n            .anticon {\n              color: ", ";\n            }\n            > * {\n              color: ", ";\n            }\n          }\n        }\n      "])), prefixCls, menuDesignToken.horizontalMenuItemPadding, prefixCls, itemHoverColor, designToken.borderRadiusBase, itemHoverColor, designToken.borderRadiusBase, menuDesignToken.menuSelectedTextColor, menuDesignToken.menuSelectedTextColor, menuDesignToken.menuSelectedTextColor),

      /**
       * 水平的 menuItem 需要一个hover
       */
      verticalMenuItem: (0, _emotion.css)(_templateObject9 || (_templateObject9 = (0, _taggedTemplateLiteral2.default)(["\n        &:hover {\n          > * {\n            color: ", ";\n            .anticon {\n              color: ", ";\n            }\n            > * {\n              color: ", ";\n            }\n          }\n        }\n      "])), menuDesignToken.menuSelectedTextColor, menuDesignToken.menuSelectedTextColor, menuDesignToken.menuSelectedTextColor),
      selectedMenuItem: (0, _emotion.css)(_templateObject10 || (_templateObject10 = (0, _taggedTemplateLiteral2.default)(["\n        background-color: ", ";\n        border-radius: ", ";\n        .", "-menu-title-content {\n          > * {\n            color: ", ";\n            .anticon {\n              color: ", ";\n            }\n          }\n        }\n      "])), itemSelectedColor, designToken.borderRadiusBase, antPrefixClassName, menuDesignToken.menuSelectedTextColor, menuDesignToken.menuSelectedTextColor),
      // subMenuItem Style
      subMenuItem: (0, _emotion.css)(_templateObject11 || (_templateObject11 = (0, _taggedTemplateLiteral2.default)(["\n        border-radius: ", ";\n        min-height: 40px;\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n        align-items: flex-start;\n        transition: background-color 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);\n        cursor: pointer;\n        color: ", ";\n\n        .", "-menu-submenu-title {\n          width: 100%;\n          margin-top: 0;\n          margin-bottom: 0;\n          line-height: 40px;\n          .anticon {\n            color: ", ";\n            opacity: 0.69;\n          }\n        }\n        .", "-menu-submenu-arrow {\n          color: ", ";\n          transform: rotate(1.25turn);\n          transition: transform 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);\n        }\n      "])), designToken.borderRadiusBase, menuDesignToken.menuTextColor, antPrefixClassName, menuDesignToken.menuTextColor, antPrefixClassName, menuDesignToken.menuTextColor),
      selectedSubMenuItem: (0, _emotion.css)(_templateObject12 || (_templateObject12 = (0, _taggedTemplateLiteral2.default)(["\n        .", "-menu-submenu-title {\n          > * {\n            color: ", ";\n            .anticon {\n              color: ", ";\n            }\n          }\n        }\n      "])), antPrefixClassName, menuDesignToken.subMenuSelectedTextColor, menuDesignToken.subMenuSelectedTextColor),
      collapsedSubMenuItem: (0, _emotion.css)(_templateObject13 || (_templateObject13 = (0, _taggedTemplateLiteral2.default)(["\n        .", "-menu-submenu-title{\n          padding: 0 !important;\n          width: 100%;\n        }\n        .", "-menu-title-content {\n          ", "\n          display: flex;\n          height: 100%;\n          align-items: center;\n          justify-content: center;\n          font-size: 16px;\n        }\n        .", "-menu-submenu-title .anticon {\n          font-size: 16px;\n        }\n        .", "-menu-submenu-arrow {\n          display: none;\n        }\n      "])), antPrefixClassName, antPrefixClassName, mode !== 'horizontal' ? 'width: 100%;' : '', antPrefixClassName, antPrefixClassName),
      collapsedSelectSubMenuItem: (0, _emotion.css)(_templateObject14 || (_templateObject14 = (0, _taggedTemplateLiteral2.default)(["\n        background-color: ", ";\n        border-radius: ", ";\n      "])), itemSelectedColor, designToken.borderRadiusBase),
      openItem: (0, _emotion.css)(_templateObject15 || (_templateObject15 = (0, _taggedTemplateLiteral2.default)(["\n        .", "-menu-submenu-arrow {\n          transform: rotate(0.75turn);\n        }\n      "])), antPrefixClassName),
      verticalSubItem: (0, _emotion.css)(_templateObject16 || (_templateObject16 = (0, _taggedTemplateLiteral2.default)(["\n        .", "-menu-submenu-title:hover {\n          color: ", ";\n          background-color: ", ";\n          border-radius: ", ";\n        }\n      "])), antPrefixClassName, menuDesignToken.menuTextColor, itemHoverColor, designToken.borderRadiusBase),
      horizontalSubMenuItem: (0, _emotion.css)(_templateObject17 || (_templateObject17 = (0, _taggedTemplateLiteral2.default)(["\n        .", "-menu-submenu-title{\n          min-height: 43px;\n          display: flex;\n          align-items: center;\n        }\n        .", "-menu-submenu-title:hover {\n          color:", ";\n          background-color: ", ";\n          border-radius: ", ";\n        }\n        .", "-menu-submenu-arrow {\n          display: none;\n        }\n      "])), antPrefixClassName, antPrefixClassName, designToken.colorText, itemHoverColor, designToken.borderRadiusBase, antPrefixClassName)
    };
  }, [antPrefixClassName, collapsed, designToken.borderRadiusBase, designToken.colorText, menuDesignToken.horizontalMenuItemPadding, menuDesignToken.menuItemCollapsedHoverBgColor, menuDesignToken.menuItemCollapsedSelectedBgColor, menuDesignToken.menuItemHoverBgColor, menuDesignToken.menuItemSelectedBgColor, menuDesignToken.menuSelectedTextColor, menuDesignToken.menuTextColor, menuDesignToken.subMenuSelectedTextColor, mode, prefixCls]);
  var menuCss = (0, _react.useMemo)(function () {
    return (0, _emotion.css)(_templateObject18 || (_templateObject18 = (0, _taggedTemplateLiteral2.default)(["\n    padding: ", ";\n    background: transparent;\n    border:none !important;\n\n    // \u5173\u6389\u52A8\u753B\u907F\u514D\u6027\u80FD\u95EE\u9898\n    * > div {\n      transition: none !important;\n    }\n\n    .", "-menu-title-content{\n      width: 100%;\n    }\n\n    &.", "-layout-sider-collapsed {\n      flex-direction: column;\n      padding-bottom: 24px;\n    }\n\n    .", "-menu-root {\n      padding: 8px;\n    }\n\n    .", "-menu-sub {\n      background: transparent;\n    }\n\n    .", "-menu-item-divider {\n      &:last-child {\n        display: none;\n      }\n    }\n    .", "-menu-item-group-title {\n      color: ", ";\n      font-size: 12px;\n      line-height: 20px;\n    }\n  "])), props.isMobile ? 0 : '6px', antPrefixClassName, antPrefixClassName, antPrefixClassName, antPrefixClassName, prefixCls, antPrefixClassName, menuDesignToken.menuTextColorSecondary);
  }, [antPrefixClassName, menuDesignToken.menuTextColorSecondary, prefixCls, props.isMobile]);

  if (menu === null || menu === void 0 ? void 0 : menu.loading) {
    return (0, _jsxRuntime.jsx)("div", {
      style: (mode === null || mode === void 0 ? void 0 : mode.includes('inline')) ? {
        padding: 24
      } : {
        marginTop: 16
      },
      children: (0, _jsxRuntime.jsx)(_skeleton.default, {
        active: true,
        title: false,
        paragraph: {
          rows: (mode === null || mode === void 0 ? void 0 : mode.includes('inline')) ? 6 : 1
        }
      })
    });
  } // 这次 openKeys === false 的时候的情况，这种情况下帮用户选中一次
  // 第二此不会使用，所以用了 defaultOpenKeys
  // 这里返回 null，是为了让 defaultOpenKeys 生效


  if (props.openKeys === false && !props.handleOpenChange) {
    defaultOpenKeysRef.current = matchMenuKeys;
  }

  var finallyData = props.postMenuData ? props.postMenuData(menuData) : menuData;

  if (finallyData && (finallyData === null || finallyData === void 0 ? void 0 : finallyData.length) < 1) {
    return null;
  }

  return /*#__PURE__*/(0, _react.createElement)(_menu.default, (0, _objectSpread2.default)((0, _objectSpread2.default)({}, openKeysProps), {}, {
    key: "Menu",
    mode: mode,
    inlineIndent: 16,
    defaultOpenKeys: defaultOpenKeysRef.current,
    theme: "light",
    selectedKeys: selectedKeys,
    style: style,
    className: (0, _emotion.cx)(className, menuCss, mode === 'horizontal' && (0, _emotion.css)(_templateObject19 || (_templateObject19 = (0, _taggedTemplateLiteral2.default)(["\n            li.", "-menu-item {\n              height: 100%;\n              line-height: 1;\n            }\n          "])), antPrefixClassName)),
    _internalRenderSubMenuItem: function _internalRenderSubMenuItem(dom, _, stateProps) {
      return /*#__PURE__*/_react.default.cloneElement(dom, (0, _objectSpread2.default)((0, _objectSpread2.default)({}, dom.props), {}, {
        className: (0, _emotion.cx)("".concat(prefixCls, "-menu-submenu"), (stateProps === null || stateProps === void 0 ? void 0 : stateProps.selected) && "".concat(prefixCls, "-menu-submenu-selected"), (stateProps === null || stateProps === void 0 ? void 0 : stateProps.open) && "".concat(prefixCls, "-menu-submenu-open"), menuItemCssMap.subMenuItem, // 收起的样式
        collapsed && menuItemCssMap.collapsedSubMenuItem, // 顶部菜单和水平菜单需要不同的 css
        mode !== 'horizontal' ? menuItemCssMap.verticalSubItem : menuItemCssMap.horizontalSubMenuItem, (stateProps === null || stateProps === void 0 ? void 0 : stateProps.selected) ? menuItemCssMap.selectedSubMenuItem : null, (stateProps === null || stateProps === void 0 ? void 0 : stateProps.open) ? menuItemCssMap.openItem : null, collapsed && (stateProps === null || stateProps === void 0 ? void 0 : stateProps.selected) ? menuItemCssMap.collapsedSelectSubMenuItem : null)
      }));
    },
    items: menuUtils.getNavMenuItems(finallyData, 0),
    _internalRenderMenuItem: function _internalRenderMenuItem(dom, itemProps, stateProps) {
      return /*#__PURE__*/_react.default.cloneElement(dom, (0, _objectSpread2.default)((0, _objectSpread2.default)({}, dom.props), {}, {
        className: (0, _emotion.cx)("".concat(prefixCls, "-menu-item"), (stateProps === null || stateProps === void 0 ? void 0 : stateProps.selected) && "".concat(prefixCls, "-menu-item-selected"), // 展开的样式
        menuItemCssMap.menuItem, // 收起的样式
        collapsed && menuItemCssMap.collapsedItem,
        /**
         * 收起时展示 title
         */
        collapsed && (menu === null || menu === void 0 ? void 0 : menu.collapsedShowTitle) && menuItemCssMap.collapsedItemShowTitle, // 顶部菜单和水平菜单需要不同的 css
        mode !== 'horizontal' ? menuItemCssMap.verticalMenuItem : menuItemCssMap.horizontalMenuItem, (stateProps === null || stateProps === void 0 ? void 0 : stateProps.selected) ? menuItemCssMap.selectedMenuItem : null)
      }));
    },
    onOpenChange: setOpenKeys
  }, props.menuProps));
};

exports.BaseMenu = BaseMenu;