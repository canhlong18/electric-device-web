"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DefaultHeader = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

require("antd/lib/layout/style");

var _layout = _interopRequireDefault(require("antd/lib/layout"));

var _jsxRuntime = require("react/jsx-runtime");

var _classnames = _interopRequireDefault(require("classnames"));

var _react = require("react");

var _GlobalHeader = require("./components/GlobalHeader");

var _TopNavHeader = require("./components/TopNavHeader");

var _emotion = require("./emotion");

var _ProLayoutContext = require("./ProLayoutContext");

var _utils = require("./utils/utils");

var _templateObject, _templateObject2;

var Header = _layout.default.Header;
var ProLayoutFixedHeaderCss = (0, _emotion.css)({
  position: 'fixed',
  top: 0,
  padding: 0,
  backgroundColor: 'transparent'
});

var getProLayoutHeaderCss = function getProLayoutHeaderCss(designToken) {
  /**
   * 有没有设置默认的背景颜色，没有的话是透明的
   */
  var isChangeHeaderBgColor = designToken.header.headerBgColor !== _ProLayoutContext.DefaultDesignToken.header.headerBgColor;
  return (0, _emotion.css)(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2.default)(["\n    z-index: 9;\n    width: 100%;\n    padding: 0 8px;\n    border-bottom: 1px solid ", ";\n    transition: width 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);\n\n    ", "\n    ", "\n  "])), designToken.borderColorSplit, isChangeHeaderBgColor && "background-color: ".concat(designToken.header.headerBgColor), !isChangeHeaderBgColor && "\n      background-color: rgba(255, 255, 255, 0.58);\n      -webkit-backdrop-filter: blur(8px);\n      backdrop-filter: blur(8px);\n    ");
};

var DefaultHeader = function DefaultHeader(props) {
  var _classNames;

  var designToken = (0, _react.useContext)(_ProLayoutContext.ProLayoutContext);
  var isMobile = props.isMobile,
      fixedHeader = props.fixedHeader,
      propsClassName = props.className,
      style = props.style,
      collapsed = props.collapsed,
      prefixCls = props.prefixCls,
      headerHeight = props.headerHeight,
      onCollapse = props.onCollapse,
      navTheme = props.navTheme,
      layout = props.layout,
      headerRender = props.headerRender,
      headerContentRender = props.headerContentRender;
  var renderContent = (0, _react.useCallback)(function () {
    var isTop = layout === 'top';
    var clearMenuData = (0, _utils.clearMenuItem)(props.menuData || []);
    var defaultDom = (0, _jsxRuntime.jsx)(_GlobalHeader.GlobalHeader, (0, _objectSpread2.default)((0, _objectSpread2.default)({
      onCollapse: onCollapse
    }, props), {}, {
      menuData: clearMenuData,
      children: headerContentRender && headerContentRender(props, null)
    }));

    if (isTop && !isMobile) {
      defaultDom = (0, _jsxRuntime.jsx)(_TopNavHeader.TopNavHeader, (0, _objectSpread2.default)((0, _objectSpread2.default)({
        theme: navTheme,
        mode: "horizontal",
        onCollapse: onCollapse
      }, props), {}, {
        menuData: clearMenuData
      }));
    }

    if (headerRender && typeof headerRender === 'function') {
      return headerRender(props, defaultDom);
    }

    return defaultDom;
  }, [headerContentRender, headerRender, isMobile, layout, navTheme, onCollapse, props]);
  var getHeaderActionsCss = (0, _react.useCallback)(function () {
    return (0, _emotion.css)(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2.default)(["\n      .", "-header-actions {\n        display: flex;\n        align-items: center;\n        font-size: 16;\n        cursor: pointer;\n        &-item {\n          padding: 0 8px;\n          &:hover {\n            color: ", ";\n          }\n        }\n      }\n      .", "-header-realDark {\n        box-shadow: 0 2px 8px 0 rgba(0, 0, 0, 65%);\n      }\n      .", "-header-actions-header-action {\n        transition: width 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);\n      }\n    "])), propsClassName, designToken.colorText, propsClassName, propsClassName);
  }, [designToken.colorText, propsClassName]);
  var needFixedHeader = fixedHeader || layout === 'mix';
  var isTop = layout === 'top';
  var className = (0, _classnames.default)(propsClassName, (_classNames = {}, (0, _defineProperty2.default)(_classNames, "".concat(prefixCls, "-fixed-header"), needFixedHeader), (0, _defineProperty2.default)(_classNames, "".concat(prefixCls, "-fixed-header-action"), !collapsed), (0, _defineProperty2.default)(_classNames, "".concat(prefixCls, "-top-menu"), isTop), (0, _defineProperty2.default)(_classNames, "".concat(prefixCls, "-header"), true), _classNames));
  var right = needFixedHeader ? 0 : undefined;
  var headerCss = (0, _react.useMemo)(function () {
    if (layout === 'side' && !isMobile) return undefined;
    return (0, _emotion.cx)(needFixedHeader && ProLayoutFixedHeaderCss, (0, _emotion.css)((0, _objectSpread2.default)({
      height: headerHeight,
      lineHeight: "".concat(headerHeight, "px"),
      width: '100%',
      zIndex: layout === 'mix' ? 100 : 19,
      right: right
    }, style)), className, getProLayoutHeaderCss(designToken), getHeaderActionsCss());
  }, [className, designToken, getHeaderActionsCss, headerHeight, isMobile, layout, needFixedHeader, right, style]);
  if (layout === 'side' && !isMobile) return null;
  return (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
    children: [needFixedHeader && (0, _jsxRuntime.jsx)(Header, {
      style: {
        height: headerHeight,
        lineHeight: "".concat(headerHeight, "px"),
        backgroundColor: 'transparent'
      }
    }), (0, _jsxRuntime.jsx)(Header, {
      className: headerCss,
      children: renderContent()
    })]
  });
};

exports.DefaultHeader = DefaultHeader;